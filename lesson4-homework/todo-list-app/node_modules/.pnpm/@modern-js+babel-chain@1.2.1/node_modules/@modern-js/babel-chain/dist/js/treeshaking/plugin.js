function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

export var createBabelPluginChain = function createBabelPluginChain() {
  var plugins = [];
  var blacks = [];

  var plugin = function plugin(name) {
    var pluginExist = plugins.find(function (plugin) {
      return plugin.name === name;
    });
    var isExist = Boolean(pluginExist); // eslint-disable-next-line @typescript-eslint/no-shadow

    var plugin = pluginExist || {
      name: name,
      options: []
    };

    var tap = function tap(options) {
      plugin.options = options;
      set();
    };

    var options = function options() {
      return plugin.options;
    };

    var del = function del() {
      if (isExist) {
        // eslint-disable-next-line @typescript-eslint/no-shadow
        plugins = plugins.filter(function (plugin) {
          return !plugin.name.includes(name);
        });
      }
    };

    var ban = function ban() {
      if (!blacks.includes(name)) {
        blacks.push(name);
      }

      del();
    };

    var set = function set() {
      if (blacks.includes(name)) {
        throw new Error("Plugin: ".concat(name, " has been banned!, You can't set it."));
      } // merge preset with replacing
      // see https://babeljs.io/docs/en/configuration#how-babel-merges-config-items


      if (!isExist) {
        plugins.push(plugin);
      }
    }; // eslint-disable-next-line @typescript-eslint/no-shadow


    var use = function use(path, options) {
      plugin.path = path;
      plugin.options = options || [];
      set();
    };

    return {
      tap: tap,
      "delete": del,
      ban: ban,
      options: options,
      filter: plugins.filter,
      use: use
    };
  };

  var toJSON = function toJSON() {
    return (// eslint-disable-next-line @typescript-eslint/no-shadow
      plugins.map(function (plugin) {
        return plugin.options ? [plugin.path || plugin.name].concat(_toConsumableArray(plugin.options)) : plugin.path || plugin.name;
      })
    );
  }; // merge preset with replacing
  // see https://babeljs.io/docs/en/configuration#how-babel-merges-config-items


  var merge = function merge(other) {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    var _iterator = _createForOfIteratorHelper(other.plugins),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _plugin = _step.value;

        if (_plugin.path) {
          chain.plugin(_plugin.name).use(_plugin.path, _plugin.options);
        } else {
          chain.plugin(_plugin.name).tap(_plugin.options);
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return chain;
  };

  var chain = {
    plugin: plugin,
    plugins: plugins,
    blacks: blacks,
    toJSON: toJSON,
    merge: merge
  };
  return chain;
};