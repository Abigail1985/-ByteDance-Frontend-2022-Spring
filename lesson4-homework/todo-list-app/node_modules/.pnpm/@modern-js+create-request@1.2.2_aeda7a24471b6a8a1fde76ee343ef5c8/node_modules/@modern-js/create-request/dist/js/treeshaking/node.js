function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

import qs from 'querystring';
import nodeFetch from 'node-fetch';
import { compile, pathToRegexp } from 'path-to-regexp';
import { useHeaders } from '@modern-js/plugin-ssr/node';
import { handleRes } from "./handleRes";
var realRequest;
var realAllowedHeaders = [];

var originFetch = function originFetch() {
  return nodeFetch.apply(void 0, arguments) // eslint-disable-next-line promise/prefer-await-to-then
  .then(handleRes);
};

export var configure = function configure(options) {
  var request = options.request,
      interceptor = options.interceptor,
      allowedHeaders = options.allowedHeaders;
  realRequest = request || originFetch;

  if (interceptor && !request) {
    realRequest = interceptor(nodeFetch);
  }

  if (Array.isArray(allowedHeaders)) {
    realAllowedHeaders = allowedHeaders;
  }
};
export var createRequest = function createRequest(path, method, port) {
  var fetch = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : nodeFetch;
  var getFinalPath = compile(path, {
    encode: encodeURIComponent
  });
  var keys = [];
  pathToRegexp(path, keys); // eslint-disable-next-line max-statements

  var sender = function sender() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    // eslint-disable-next-line react-hooks/rules-of-hooks
    var webRequestHeaders = useHeaders();
    var payload = _typeof(args[args.length - 1]) === 'object' ? args[args.length - 1] : {};
    payload.params = payload.params || {};
    keys.forEach(function (key, index) {
      payload.params[key.name] = args[index];
    });
    var plainPath = getFinalPath(payload.params);
    var finalPath = payload.query ? "".concat(plainPath, "?").concat(qs.stringify(payload.query)) : plainPath;
    var headers = payload.headers || {};
    var body;

    var _iterator = _createForOfIteratorHelper(realAllowedHeaders),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var key = _step.value;

        if (typeof webRequestHeaders[key] !== 'undefined') {
          headers[key] = webRequestHeaders[key];
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    if (payload.data) {
      headers['Content-Type'] = 'application/json';
      body = _typeof(payload.data) === 'object' ? JSON.stringify(payload.data) : payload.body;
    } else if (payload.body) {
      headers['Content-Type'] = 'text/plain'; // eslint-disable-next-line prefer-destructuring

      body = payload.body;
    } else if (payload.formData) {
      body = payload.formData; // https://stackoverflow.com/questions/44919424/bad-content-type-header-no-multipart-boundary-nodejs
      // need multipart boundary auto attached by node-fetch when multipart is true
      // headers['Content-Type'] = 'multipart/form-data';
    } else if (payload.formUrlencoded) {
      headers['Content-Type'] = 'application/x-www-form-urlencoded';

      if (_typeof(payload.formUrlencoded) === 'object') {
        body = qs.stringify(payload.formUrlencoded);
      } else {
        body = payload.formUrlencoded;
      }
    }

    var url = "http://localhost:".concat(port).concat(finalPath);
    var fetcher = realRequest || originFetch;
    return fetcher(url, {
      method: method,
      body: body,
      headers: headers
    });
  };

  return sender;
};