function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import spawn from 'cross-spawn';
import minimist from 'minimist';
import chalk from 'chalk';
import { logger } from '@modern-js/utils';

var ensureOption = function ensureOption(args, name, val) {
  if (!args.hasOwnProperty(name) || args[name].length < 1) {
    if (Array.isArray(val)) {
      return ["--".concat(name), val.join(',')];
    }

    if (typeof val === 'boolean') {
      return val ? ["--".concat(name)] : ["--no-".concat(name)];
    } else {
      return ["--".concat(name), val];
    }
  }

  return [];
};

export default (function () {
  var _args$_;

  var rawArgs = process.argv.slice(3);
  var args = minimist(rawArgs);
  var exts = ['.js', '.jsx', '.ts', '.tsx', '.mjs', '.mjsx', '.cjs', '.cjsx'];
  rawArgs.push.apply(rawArgs, _toConsumableArray(ensureOption(args, 'ext', exts)));
  rawArgs.push.apply(rawArgs, _toConsumableArray(ensureOption(args, 'fix', true)));
  rawArgs.push.apply(rawArgs, _toConsumableArray(ensureOption(args, 'format', 'codeframe'))); // default ignore pattern

  ['node_modules/', 'dist/', 'output/', 'output_resource/'].forEach(function (pattern) {
    rawArgs.push.apply(rawArgs, _toConsumableArray(ensureOption(args, 'ignore-pattern', pattern)));
  });

  if (args !== null && args !== void 0 && (_args$_ = args._) !== null && _args$_ !== void 0 && _args$_.length) {
    rawArgs.push.apply(rawArgs, _toConsumableArray(args._));
  } else {
    rawArgs.push('./');
  }

  var eslintScript = require.resolve('eslint/bin/eslint.js');

  logger.info(chalk.bold('Lint...'));
  logger.info(chalk.bold("NODE_OPTIONS=\"--max-old-space-size=8192\" ".concat(eslintScript, " ").concat(rawArgs.join(' '))));
  var childprocess = spawn(eslintScript, rawArgs, {
    stdio: 'inherit'
  }); // eslint-disable-next-line no-process-exit

  childprocess.on('exit', function (code) {
    return process.exit(code || 0);
  });
});