import { createAsyncManager, createAsyncPipeline, createParallelWorkflow, createAsyncWaterfall, createContext } from '@modern-js/plugin';
import { enable } from '@modern-js/plugin/node';
enable(); // collect all middleware register in server plugins

const gather = createParallelWorkflow();
const create = createAsyncPipeline();
const prepareWebServer = createAsyncPipeline();
const prepareApiServer = createAsyncPipeline();
const preDevServerInit = createParallelWorkflow(); // eslint-disable-next-line @typescript-eslint/ban-types

const setupCompiler = createParallelWorkflow();
const postDevServerInit = createParallelWorkflow(); // TODO FIXME
// eslint-disable-next-line @typescript-eslint/ban-types

const beforeRouteSet = createAsyncPipeline();
const afterRouteSet = createAsyncPipeline();
const preServerInit = createParallelWorkflow();
const postServerInit = createParallelWorkflow();
const listen = createParallelWorkflow();
const beforeServerReset = createParallelWorkflow();
const afterServerReset = createParallelWorkflow();
const extendSSRContext = createAsyncWaterfall();
const extendContext = createAsyncPipeline();
const handleError = createParallelWorkflow();
const beforeMatch = createAsyncPipeline();
const afterMatch = createAsyncPipeline(); // TODO FIXME
// eslint-disable-next-line @typescript-eslint/ban-types

const prefetch = createParallelWorkflow(); // TODO FIXME
// eslint-disable-next-line @typescript-eslint/ban-types

const renderToString = createAsyncPipeline();
const beforeRender = createAsyncPipeline();
const afterRender = createAsyncPipeline();
const beforeSend = createAsyncPipeline();
const afterSend = createParallelWorkflow();
const reset = createParallelWorkflow();
export const createServerManager = () => createAsyncManager({
  // server hook
  gather,
  create,
  prepareWebServer,
  prepareApiServer,
  preDevServerInit,
  setupCompiler,
  postDevServerInit,
  beforeRouteSet,
  afterRouteSet,
  preServerInit,
  postServerInit,
  listen,
  beforeServerReset,
  afterServerReset,
  // request hook
  extendSSRContext,
  extendContext,
  handleError,
  beforeMatch,
  afterMatch,
  prefetch,
  renderToString,
  beforeRender,
  afterRender,
  beforeSend,
  afterSend,
  reset
});
export const serverManager = createServerManager();
export const {
  createPlugin
} = serverManager;
export const AppContext = createContext({});
export const ConfigContext = createContext({});
export const useConfigContext = () => ConfigContext.use().value;
export const useAppContext = () => AppContext.use().value;