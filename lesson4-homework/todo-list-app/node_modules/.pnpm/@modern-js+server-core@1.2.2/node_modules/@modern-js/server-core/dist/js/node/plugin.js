"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useConfigContext = exports.useAppContext = exports.serverManager = exports.createServerManager = exports.createPlugin = exports.ConfigContext = exports.AppContext = void 0;

var _plugin = require("@modern-js/plugin");

var _node = require("@modern-js/plugin/node");

(0, _node.enable)(); // collect all middleware register in server plugins

const gather = (0, _plugin.createParallelWorkflow)();
const create = (0, _plugin.createAsyncPipeline)();
const prepareWebServer = (0, _plugin.createAsyncPipeline)();
const prepareApiServer = (0, _plugin.createAsyncPipeline)();
const preDevServerInit = (0, _plugin.createParallelWorkflow)(); // eslint-disable-next-line @typescript-eslint/ban-types

const setupCompiler = (0, _plugin.createParallelWorkflow)();
const postDevServerInit = (0, _plugin.createParallelWorkflow)(); // TODO FIXME
// eslint-disable-next-line @typescript-eslint/ban-types

const beforeRouteSet = (0, _plugin.createAsyncPipeline)();
const afterRouteSet = (0, _plugin.createAsyncPipeline)();
const preServerInit = (0, _plugin.createParallelWorkflow)();
const postServerInit = (0, _plugin.createParallelWorkflow)();
const listen = (0, _plugin.createParallelWorkflow)();
const beforeServerReset = (0, _plugin.createParallelWorkflow)();
const afterServerReset = (0, _plugin.createParallelWorkflow)();
const extendSSRContext = (0, _plugin.createAsyncWaterfall)();
const extendContext = (0, _plugin.createAsyncPipeline)();
const handleError = (0, _plugin.createParallelWorkflow)();
const beforeMatch = (0, _plugin.createAsyncPipeline)();
const afterMatch = (0, _plugin.createAsyncPipeline)(); // TODO FIXME
// eslint-disable-next-line @typescript-eslint/ban-types

const prefetch = (0, _plugin.createParallelWorkflow)(); // TODO FIXME
// eslint-disable-next-line @typescript-eslint/ban-types

const renderToString = (0, _plugin.createAsyncPipeline)();
const beforeRender = (0, _plugin.createAsyncPipeline)();
const afterRender = (0, _plugin.createAsyncPipeline)();
const beforeSend = (0, _plugin.createAsyncPipeline)();
const afterSend = (0, _plugin.createParallelWorkflow)();
const reset = (0, _plugin.createParallelWorkflow)();

const createServerManager = () => (0, _plugin.createAsyncManager)({
  // server hook
  gather,
  create,
  prepareWebServer,
  prepareApiServer,
  preDevServerInit,
  setupCompiler,
  postDevServerInit,
  beforeRouteSet,
  afterRouteSet,
  preServerInit,
  postServerInit,
  listen,
  beforeServerReset,
  afterServerReset,
  // request hook
  extendSSRContext,
  extendContext,
  handleError,
  beforeMatch,
  afterMatch,
  prefetch,
  renderToString,
  beforeRender,
  afterRender,
  beforeSend,
  afterSend,
  reset
});

exports.createServerManager = createServerManager;
const serverManager = createServerManager();
exports.serverManager = serverManager;
const {
  createPlugin
} = serverManager;
exports.createPlugin = createPlugin;
const AppContext = (0, _plugin.createContext)({});
exports.AppContext = AppContext;
const ConfigContext = (0, _plugin.createContext)({});
exports.ConfigContext = ConfigContext;

const useConfigContext = () => ConfigContext.use().value;

exports.useConfigContext = useConfigContext;

const useAppContext = () => AppContext.use().value;

exports.useAppContext = useAppContext;