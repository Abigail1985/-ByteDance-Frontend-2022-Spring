"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ModernWebpackConfig = void 0;

var _babelChain = require("@modern-js/babel-chain");

var _utils = require("@modern-js/utils");

var _client = require("./client");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ModernWebpackConfig extends _client.ClientWebpackConfig {
  constructor(appContext, options) {
    super(appContext, options);

    this.htmlFilename = name => (0, _utils.removeLeadingSlash)(`${this.options.output.htmlPath}/${this.options.output.disableHtmlFolder ? `${name}-es6` : `${name}/index-es6`}.html`);

    this.jsChunkname = this.jsChunkname.replace(/\.js$/, '-es6.js');
    this.jsFilename = this.jsFilename.replace(/\.js$/, '-es6.js');
    this.babelChain = (0, _babelChain.createBabelChain)();
  }

  name() {
    this.chain.name('modern');
  }

  plugins() {
    var _this$options$cliOpti;

    super.plugins();

    if ((_this$options$cliOpti = this.options.cliOptions) !== null && _this$options$cliOpti !== void 0 && _this$options$cliOpti.analyze) {
      this.chain.plugin('bundle-analyze').tap(() => [{
        analyzerMode: 'static',
        openAnalyzer: false,
        reportFilename: 'report-modern.html'
      }]);
    }
  }

  loaders() {
    var _this$options$output, _this$options$tools;

    const loaders = super.loaders();
    const babelOptions = loaders.oneOf('js').use('babel').get('options');
    loaders.oneOf('js').use('babel').options(_objectSpread(_objectSpread({}, babelOptions), {}, {
      presets: [[require.resolve('@modern-js/babel-preset-app'), {
        metaName: this.appContext.metaName,
        appDirectory: this.appDirectory,
        target: 'client',
        useLegacyDecorators: !((_this$options$output = this.options.output) !== null && _this$options$output !== void 0 && _this$options$output.enableLatestDecorators),
        useBuiltIns: false,
        useModern: true,
        chain: this.babelChain,
        styledComponents: (0, _utils.applyOptionsChain)({
          pure: true,
          displayName: true,
          ssr: (0, _utils.isUseSSRBundle)(this.options),
          transpileTemplateLiterals: true
        }, (_this$options$tools = this.options.tools) === null || _this$options$tools === void 0 ? void 0 : _this$options$tools.styledComponents)
      }]]
    }));
    return loaders;
  }

}

exports.ModernWebpackConfig = ModernWebpackConfig;