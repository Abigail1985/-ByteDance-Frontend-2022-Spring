"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TsConfigPathsPlugin = void 0;

var _path = _interopRequireDefault(require("path"));

var _utils = require("@modern-js/utils");

var _tsconfigPaths = require("tsconfig-paths");

var _constants = require("../utils/constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _utils.createDebugger)('ts-config-paths');

class TsConfigPathsPlugin {
  constructor(cwd) {
    var _this$compilerOptions;

    this.source = void 0;
    this.target = void 0;
    this.cwd = void 0;
    this.compilerOptions = void 0;
    this.absoluteBaseUrl = void 0;
    this.matchPath = void 0;
    this.resolved = void 0;
    this.cwd = cwd;
    this.source = 'described-resolve';
    this.target = 'resolve';
    this.compilerOptions = (0, _utils.readTsConfig)(cwd).compilerOptions;
    this.absoluteBaseUrl = _path.default.resolve(cwd, this.compilerOptions.baseUrl || './');
    this.matchPath = (0, _tsconfigPaths.createMatchPath)(this.absoluteBaseUrl, ((_this$compilerOptions = this.compilerOptions) === null || _this$compilerOptions === void 0 ? void 0 : _this$compilerOptions.paths) || {}, ['browser', 'module', 'main'], false);
    this.resolved = new Map();
  }

  apply(resolver) {
    if (!resolver) {
      _utils.logger.warn('ts-config-paths-plugin: Found no resolver, not apply ts-config-paths-plugin');
    }

    const target = resolver.ensureHook(this.target);
    resolver.getHook('described-resolve').tapAsync('TsConfigPathsPlugin', (request, resolveContext, callback) => {
      var _request$descriptionF, _request$descriptionF2;

      const requestName = request.request;

      if ( // If this resolves to a node_module, we don't care what happens next
      (_request$descriptionF = request.descriptionFileRoot) !== null && _request$descriptionF !== void 0 && _request$descriptionF.includes('/node_modules/') || (_request$descriptionF2 = request.descriptionFileRoot) !== null && _request$descriptionF2 !== void 0 && _request$descriptionF2.includes('\\node_modules\\') || !requestName) {
        return callback();
      }

      if ((0, _utils.isRelativePath)(requestName)) {
        return callback();
      }

      if (_path.default.isAbsolute(requestName)) {
        return callback();
      }

      if (!this.resolved.has(requestName)) {
        const matched = this.matchPath(requestName, undefined, undefined, _constants.JS_RESOLVE_EXTENSIONS);
        this.resolved.set(requestName, matched);
      }

      if (this.resolved.get(requestName) === undefined) {
        return callback();
      }

      debug(`resolved ${requestName} to ${this.resolved.get(requestName)}`);
      return resolver.doResolve(target, _objectSpread(_objectSpread({}, request), {}, {
        request: this.resolved.get(requestName)
      }), `Aliased with tsconfig.json ${requestName} to ${this.resolved.get(requestName)}`, resolveContext, (resolverErr, resolvedResult) => {
        if (resolverErr) {
          return callback(resolverErr);
        }

        if (!resolvedResult) {
          return callback(undefined, undefined);
        }

        return callback(undefined, resolvedResult);
      });
    });
  }

}

exports.TsConfigPathsPlugin = TsConfigPathsPlugin;