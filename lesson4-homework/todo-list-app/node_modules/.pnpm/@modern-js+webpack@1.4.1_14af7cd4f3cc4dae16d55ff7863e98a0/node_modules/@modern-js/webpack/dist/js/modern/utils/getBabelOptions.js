import path from 'path';
import { isProd, getCacheIdentifier, applyOptionsChain, isUseSSRBundle } from '@modern-js/utils';
import { readPackageJson } from "./readPackageJson";
import { CACHE_DIRECTORY } from "./constants";
export const getBabelOptions = (metaName, appDirectory, config, name, chain) => {
  var _config$tools, _config$output, _config$output2, _config$output3, _config$output4, _config$tools2;

  return {
    babelrc: false,
    configFile: false,
    cacheIdentifier: getCacheIdentifier([{
      name: 'babel-loader',
      version: readPackageJson(require.resolve('babel-loader')).version
    }, {
      name: '@modern-js/babel-preset-app',
      version: readPackageJson(require.resolve('@modern-js/babel-preset-app')).version
    }]),
    cacheDirectory: path.resolve(appDirectory, CACHE_DIRECTORY, `babel/${name}`),
    cacheCompression: false,
    compact: isProd(),
    presets: [[require.resolve('@modern-js/babel-preset-app'), {
      metaName,
      appDirectory,
      target: 'client',
      lodash: applyOptionsChain({
        id: ['lodash', 'ramda']
      }, (_config$tools = config.tools) === null || _config$tools === void 0 ? void 0 : _config$tools.lodash),
      useLegacyDecorators: !((_config$output = config.output) !== null && _config$output !== void 0 && _config$output.enableLatestDecorators),
      useBuiltIns: ((_config$output2 = config.output) === null || _config$output2 === void 0 ? void 0 : _config$output2.polyfill) === 'ua' || ((_config$output3 = config.output) === null || _config$output3 === void 0 ? void 0 : _config$output3.polyfill) === 'off' ? false : (_config$output4 = config.output) === null || _config$output4 === void 0 ? void 0 : _config$output4.polyfill,
      chain,
      styledComponents: applyOptionsChain({
        pure: true,
        displayName: true,
        ssr: isUseSSRBundle(config),
        transpileTemplateLiterals: true
      }, (_config$tools2 = config.tools) === null || _config$tools2 === void 0 ? void 0 : _config$tools2.styledComponents)
    }]]
  };
};