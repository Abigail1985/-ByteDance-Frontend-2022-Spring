function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { getWebpackConfig, WebpackConfigTarget } from '@modern-js/webpack';
import { fs, logger, HMR_SOCK_PATH, clearConsole, chalk, isSSR } from '@modern-js/utils';
import { useAppContext, useResolvedConfigContext, mountHook, AppContext } from '@modern-js/core';
import { createCompiler } from "../utils/createCompiler";
import { createServer } from "../utils/createServer";
import { generateRoutes } from "../utils/routes";
import { printInstructions } from "../utils/printInstructions";
import { getSpecifiedEntries } from "../utils/getSpecifiedEntries";
export const dev = async options => {
  /* eslint-disable react-hooks/rules-of-hooks */
  const appContext = useAppContext();
  const userConfig = useResolvedConfigContext();
  /* eslint-enable react-hooks/rules-of-hooks */

  const {
    appDirectory,
    distDirectory,
    port,
    existSrc,
    entrypoints
  } = appContext;
  const checkedEntries = await getSpecifiedEntries(options.entry || false, entrypoints);
  AppContext.set(_objectSpread(_objectSpread({}, appContext), {}, {
    checkedEntries
  }));
  appContext.checkedEntries = checkedEntries;
  fs.emptyDirSync(distDirectory);
  await mountHook().beforeDev();
  let compiler = null;

  if (existSrc) {
    const webpackConfigs = [isSSR(userConfig) && getWebpackConfig(WebpackConfigTarget.NODE), getWebpackConfig(WebpackConfigTarget.CLIENT)].filter(Boolean);
    compiler = await createCompiler({
      webpackConfigs,
      userConfig,
      appContext
    });
  }

  await generateRoutes(appContext);
  const app = await createServer({
    dev: _objectSpread(_objectSpread({}, {
      client: {
        port: port.toString(),
        overlay: false,
        logging: 'none',
        path: HMR_SOCK_PATH,
        host: 'localhost'
      },
      dev: {
        writeToDisk: file => !file.includes('.hot-update.')
      },
      hot: true,
      liveReload: true,
      port,
      https: userConfig.dev.https
    }), userConfig.tools.devServer),
    compiler,
    pwd: appDirectory,
    config: userConfig,
    plugins: appContext.plugins.filter(p => p.server).map(p => p.server)
  });
  app.listen(port, async err => {
    if (err) {
      throw err;
    }

    if (existSrc) {
      clearConsole();
      logger.log(chalk.cyan(`Starting the development server...`));
    } else {
      await printInstructions(appContext, userConfig);
    }
  });
};