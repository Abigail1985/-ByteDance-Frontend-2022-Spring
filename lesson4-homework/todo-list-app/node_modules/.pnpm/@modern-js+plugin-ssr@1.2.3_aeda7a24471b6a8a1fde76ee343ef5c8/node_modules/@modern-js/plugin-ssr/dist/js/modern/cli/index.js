import path from 'path';
import { getEntryOptions, SERVER_RENDER_FUNCTION_NAME, LOADABLE_STATS_FILE, isUseSSRBundle, createRuntimeExportsUtils, PLUGIN_SCHEMAS } from '@modern-js/utils';
import { createPlugin, useAppContext, useResolvedConfigContext } from '@modern-js/core';
import LoadableWebpackPlugin from '@loadable/webpack-plugin';
const PLUGIN_IDENTIFIER = 'ssr';
export default createPlugin(() => {
  const ssrConfigMap = new Map();
  let pluginsExportsUtils;
  const ssrModulePath = path.resolve(__dirname, '../../../../');
  return {
    config() {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      const appContext = useAppContext();
      pluginsExportsUtils = createRuntimeExportsUtils(appContext.internalDirectory, 'plugins');
      return {
        source: {
          alias: {
            '@modern-js/runtime/plugins': pluginsExportsUtils.getPath()
          }
        },
        tools: {
          webpack: (config, {
            chain
          }) => {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            const userConfig = useResolvedConfigContext();

            if (isUseSSRBundle(userConfig) && config.name !== 'server') {
              chain.plugin('loadable').use(LoadableWebpackPlugin, [{
                filename: LOADABLE_STATS_FILE
              }]);
            }
          },
          babel: (config, {
            chain
          }) => {
            // eslint-disable-next-line react-hooks/rules-of-hooks
            const userConfig = useResolvedConfigContext();

            if (isUseSSRBundle(userConfig)) {
              chain === null || chain === void 0 ? void 0 : chain.plugin('loadable').use(require.resolve('@loadable/babel-plugin'));
            }
          }
        }
      };
    },

    validateSchema() {
      return PLUGIN_SCHEMAS['@modern-js/plugin-ssr'];
    },

    modifyEntryImports({
      entrypoint,
      imports
    }) {
      const {
        entryName
      } = entrypoint; // eslint-disable-next-line react-hooks/rules-of-hooks

      const userConfig = useResolvedConfigContext(); // eslint-disable-next-line react-hooks/rules-of-hooks

      const {
        packageName
      } = useAppContext();
      pluginsExportsUtils.addExport(`export { default as ssr } from '${ssrModulePath}'`); // if use ssg then set ssr config to true

      const ssrConfig = Boolean(userConfig.output.ssg) || getEntryOptions(entryName, userConfig.server.ssr, userConfig.server.ssrByEntries, packageName);
      ssrConfigMap.set(entryName, ssrConfig);

      if (ssrConfig) {
        imports.push({
          value: '@modern-js/runtime/plugins',
          specifiers: [{
            imported: PLUGIN_IDENTIFIER
          }]
        });
      }

      return {
        entrypoint,
        imports
      };
    },

    modifyEntryRuntimePlugins({
      entrypoint,
      plugins
    }) {
      if (ssrConfigMap.get(entrypoint.entryName)) {
        plugins.push({
          name: PLUGIN_IDENTIFIER,
          options: ssrConfigMap.get(entrypoint.entryName)
        });
      }

      return {
        entrypoint,
        plugins
      };
    },

    modifyEntryExport({
      entrypoint,
      exportStatement
    }) {
      if (ssrConfigMap.get(entrypoint.entryName)) {
        return {
          entrypoint,
          exportStatement: [`export function ${SERVER_RENDER_FUNCTION_NAME}(context) {
              return bootstrap(AppWrapper, context)
            }`, exportStatement].join('\n')
        };
      }

      return {
        entrypoint,
        exportStatement
      };
    }

  };
}, {
  name: '@modern-js/plugin-ssr',
  required: ['@modern-js/runtime']
});