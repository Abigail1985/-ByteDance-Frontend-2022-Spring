import path from 'path';
import { fs, findExists, MAIN_ENTRY_NAME } from '@modern-js/utils';
import { mountHook } from '@modern-js/core';
import { HTML_PARTIALS_EXTENSIONS, HTML_PARTIALS_FOLDER } from "./constants";
import * as templates from "./templates";
var PartialPosition;

(function (PartialPosition) {
  PartialPosition["TOP"] = "top";
  PartialPosition["HEAD"] = "head";
  PartialPosition["BODY"] = "body";
  PartialPosition["BOTTOM"] = "bottom";
  PartialPosition["INDEX"] = "index";
})(PartialPosition || (PartialPosition = {}));

const findPartials = (dir, entryName, postion) => {
  if (fs.existsSync(dir)) {
    const base = findExists(HTML_PARTIALS_EXTENSIONS.map(ext => path.resolve(dir, `${postion}${ext}`)));
    const file = entryName ? findExists(HTML_PARTIALS_EXTENSIONS.map(ext => path.resolve(dir, entryName, `${postion}${ext}`))) || base : base;
    return file ? {
      file,
      content: fs.readFileSync(file, 'utf8')
    } : null;
  }

  return null;
}; // generate html template for


export const getHtmlTemplate = async (entrypoints, {
  appContext,
  config
}) => {
  const {
    appDirectory,
    internalDirectory
  } = appContext;
  const {
    source: {
      configDir
    }
  } = config;
  const htmlDir = path.resolve(appDirectory, configDir, HTML_PARTIALS_FOLDER);
  const htmlTemplates = {};

  for (const entrypoint of entrypoints) {
    const {
      entryName
    } = entrypoint;
    const name = entrypoints.length === 1 && entryName === MAIN_ENTRY_NAME ? '' : entryName;
    const customIndexTemplate = findPartials(htmlDir, name, PartialPosition.INDEX);

    if (customIndexTemplate) {
      htmlTemplates[entryName] = customIndexTemplate.file;
    } else {
      const {
        partials
      } = await mountHook().htmlPartials({
        entrypoint,
        partials: [PartialPosition.TOP, PartialPosition.HEAD, PartialPosition.BODY].reduce((previous, position) => {
          const finded = findPartials(htmlDir, name, position);
          previous[position] = finded ? [finded.content] : [];
          return previous;
        }, {
          top: [],
          head: [],
          body: []
        })
      });
      const templatePath = path.resolve(internalDirectory, entryName, 'index.html');
      fs.outputFileSync(templatePath, templates.html(partials), 'utf8');
      htmlTemplates[entryName] = templatePath;
      const bottomTemplate = findPartials(htmlDir, name, PartialPosition.BOTTOM);

      if (bottomTemplate) {
        htmlTemplates[`__${entryName}-bottom__`] = bottomTemplate.content;
      }
    }
  }

  return htmlTemplates;
};