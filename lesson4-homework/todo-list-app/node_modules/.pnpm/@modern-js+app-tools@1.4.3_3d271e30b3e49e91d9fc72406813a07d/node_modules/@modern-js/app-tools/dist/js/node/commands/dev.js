"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.dev = void 0;

var _webpack = require("@modern-js/webpack");

var _utils = require("@modern-js/utils");

var _core = require("@modern-js/core");

var _createCompiler = require("../utils/createCompiler");

var _createServer = require("../utils/createServer");

var _routes = require("../utils/routes");

var _printInstructions = require("../utils/printInstructions");

var _getSpecifiedEntries = require("../utils/getSpecifiedEntries");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const dev = async options => {
  /* eslint-disable react-hooks/rules-of-hooks */
  const appContext = (0, _core.useAppContext)();
  const userConfig = (0, _core.useResolvedConfigContext)();
  /* eslint-enable react-hooks/rules-of-hooks */

  const {
    appDirectory,
    distDirectory,
    port,
    existSrc,
    entrypoints
  } = appContext;
  const checkedEntries = await (0, _getSpecifiedEntries.getSpecifiedEntries)(options.entry || false, entrypoints);

  _core.AppContext.set(_objectSpread(_objectSpread({}, appContext), {}, {
    checkedEntries
  }));

  appContext.checkedEntries = checkedEntries;

  _utils.fs.emptyDirSync(distDirectory);

  await (0, _core.mountHook)().beforeDev();
  let compiler = null;

  if (existSrc) {
    const webpackConfigs = [(0, _utils.isSSR)(userConfig) && (0, _webpack.getWebpackConfig)(_webpack.WebpackConfigTarget.NODE), (0, _webpack.getWebpackConfig)(_webpack.WebpackConfigTarget.CLIENT)].filter(Boolean);
    compiler = await (0, _createCompiler.createCompiler)({
      webpackConfigs,
      userConfig,
      appContext
    });
  }

  await (0, _routes.generateRoutes)(appContext);
  const app = await (0, _createServer.createServer)({
    dev: _objectSpread(_objectSpread({}, {
      client: {
        port: port.toString(),
        overlay: false,
        logging: 'none',
        path: _utils.HMR_SOCK_PATH,
        host: 'localhost'
      },
      dev: {
        writeToDisk: file => !file.includes('.hot-update.')
      },
      hot: true,
      liveReload: true,
      port,
      https: userConfig.dev.https
    }), userConfig.tools.devServer),
    compiler,
    pwd: appDirectory,
    config: userConfig,
    plugins: appContext.plugins.filter(p => p.server).map(p => p.server)
  });
  app.listen(port, async err => {
    if (err) {
      throw err;
    }

    if (existSrc) {
      (0, _utils.clearConsole)();

      _utils.logger.log(_utils.chalk.cyan(`Starting the development server...`));
    } else {
      await (0, _printInstructions.printInstructions)(appContext, userConfig);
    }
  });
};

exports.dev = dev;