"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
Object.defineProperty(exports, "defineConfig", {
  enumerable: true,
  get: function () {
    return _core.defineConfig;
  }
});

var path = _interopRequireWildcard(require("path"));

var _core = require("@modern-js/core");

var _utils = require("@modern-js/utils");

var _lifecycle = require("./lifecycle");

var _locale = require("./locale");

var _language = require("./utils/language");

var _start = require("./commands/start");

var _dev = require("./commands/dev");

var _createServer = require("./utils/createServer");

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// eslint-disable-next-line react-hooks/rules-of-hooks
(0, _core.usePlugins)([require.resolve('@modern-js/plugin-analyze/cli'), require.resolve('@modern-js/plugin-fast-refresh/cli')]);

var _default = (0, _core.createPlugin)(() => {
  const locale = (0, _language.getLocaleLanguage)();

  _locale.i18n.changeLanguage({
    locale
  });

  (0, _lifecycle.lifecycle)();
  return {
    commands({
      program
    }) {
      program.command('dev').usage('[options]').description(_locale.i18n.t(_locale.localeKeys.command.dev.describe)).option('-c --config <config>', _locale.i18n.t(_locale.localeKeys.command.dev.config)).option('-e --entry [entry...]', _locale.i18n.t(_locale.localeKeys.command.dev.entry)).action(async options => {
        await (0, _dev.dev)(options);
      });
      program.command('build').usage('[options]').description(_locale.i18n.t(_locale.localeKeys.command.build.describe)).option('--analyze', _locale.i18n.t(_locale.localeKeys.command.build.analyze)).action(async options => {
        const {
          build
        } = await Promise.resolve().then(() => _interopRequireWildcard(require("./commands/build")));
        await build(options); // force exit after build.
        // eslint-disable-next-line no-process-exit

        process.exit(0);
      });
      program.command('start').usage('[options]').description(_locale.i18n.t(_locale.localeKeys.command.start.describe)).action(async () => {
        await (0, _start.start)();
      });
      program.command('deploy').usage('[options]').description(_locale.i18n.t(_locale.localeKeys.command.deploy.describe)).action(async options => {
        const {
          build
        } = await Promise.resolve().then(() => _interopRequireWildcard(require("./commands/build")));
        await build();
        const {
          deploy
        } = await Promise.resolve().then(() => _interopRequireWildcard(require("./commands/deploy")));
        await deploy(options); // eslint-disable-next-line no-process-exit

        process.exit(0);
      });
      program.command('new').usage('[options]').description(_locale.i18n.t(_locale.localeKeys.command.new.describe)).option('-d, --debug', _locale.i18n.t(_locale.localeKeys.command.new.debug), false).option('-c, --config <config>', _locale.i18n.t(_locale.localeKeys.command.new.config)).option('--dist-tag <tag>', _locale.i18n.t(_locale.localeKeys.command.new.distTag)).option('--registry', _locale.i18n.t(_locale.localeKeys.command.new.registry)).action(async options => {
        const {
          MWANewAction
        } = await Promise.resolve().then(() => _interopRequireWildcard(require('@modern-js/new-action')));
        await MWANewAction(_objectSpread(_objectSpread({}, options), {}, {
          locale
        }));
      });
    },

    // 这里会被 core/initWatcher 监听的文件变动触发，如果是 src 目录下的文件变动，则不做 restart
    async fileChange(e) {
      const {
        filename,
        eventType
      } = e; // eslint-disable-next-line react-hooks/rules-of-hooks

      const appContext = (0, _core.useAppContext)();
      const {
        appDirectory,
        srcDirectory
      } = appContext;
      const absolutePath = path.resolve(appDirectory, filename);

      if (!absolutePath.includes(srcDirectory) && (eventType === 'change' || eventType === 'unlink')) {
        await (0, _createServer.closeServer)();
        await _core.cli.restart();
      }
    },

    async beforeRestart() {
      (0, _utils.cleanRequireCache)([require.resolve('@modern-js/plugin-analyze/cli'), require.resolve('@modern-js/plugin-fast-refresh/cli')]);
    }

  };
}, {
  name: '@modern-js/app-tools',
  post: ['@modern-js/plugin-analyze', '@modern-js/plugin-fast-refresh', '@modern-js/plugin-ssr', '@modern-js/plugin-state', '@modern-js/plugin-router', '@modern-js/plugin-polyfill']
});

exports.default = _default;