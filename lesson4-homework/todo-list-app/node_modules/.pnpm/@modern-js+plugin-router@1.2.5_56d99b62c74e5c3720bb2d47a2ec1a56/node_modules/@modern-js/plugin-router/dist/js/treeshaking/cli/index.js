function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import path from 'path';
import { getEntryOptions, createRuntimeExportsUtils, PLUGIN_SCHEMAS } from '@modern-js/utils';
import { useAppContext, createPlugin, useResolvedConfigContext } from '@modern-js/core';
var PLUGIN_IDENTIFIER = 'router';
var ROUTES_IDENTIFIER = 'routes';
export default createPlugin(function () {
  var runtimeConfigMap = new Map();
  var pluginsExportsUtils;
  var runtimeModulePath = path.resolve(__dirname, '../../../../');
  return {
    config: function config() {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      var appContext = useAppContext();
      pluginsExportsUtils = createRuntimeExportsUtils(appContext.internalDirectory, 'plugins');
      return {
        source: {
          alias: {
            '@modern-js/runtime/plugins': pluginsExportsUtils.getPath()
          }
        }
      };
    },
    validateSchema: function validateSchema() {
      return PLUGIN_SCHEMAS['@modern-js/plugin-router'];
    },
    modifyEntryImports: function modifyEntryImports(_ref) {
      var entrypoint = _ref.entrypoint,
          imports = _ref.imports;
      var entryName = entrypoint.entryName,
          fileSystemRoutes = entrypoint.fileSystemRoutes; // eslint-disable-next-line react-hooks/rules-of-hooks

      var userConfig = useResolvedConfigContext(); // eslint-disable-next-line react-hooks/rules-of-hooks

      var _useAppContext = useAppContext(),
          packageName = _useAppContext.packageName;

      var runtimeConfig = getEntryOptions(entryName, userConfig.runtime, userConfig.runtimeByEntries, packageName);
      runtimeConfigMap.set(entryName, runtimeConfig);

      if (runtimeConfig.router) {
        imports.push({
          value: '@modern-js/runtime/plugins',
          specifiers: [{
            imported: PLUGIN_IDENTIFIER
          }]
        });
      } else if (fileSystemRoutes) {
        throw new Error("should enable runtime.router for entry ".concat(entryName));
      }

      return {
        entrypoint: entrypoint,
        imports: imports
      };
    },
    modifyEntryRuntimePlugins: function modifyEntryRuntimePlugins(_ref2) {
      var entrypoint = _ref2.entrypoint,
          plugins = _ref2.plugins;
      var entryName = entrypoint.entryName,
          fileSystemRoutes = entrypoint.fileSystemRoutes;

      var _useAppContext2 = useAppContext(),
          serverRoutes = _useAppContext2.serverRoutes;

      var runtimeConfig = runtimeConfigMap.get(entryName);

      if (runtimeConfig.router) {
        // Todo: plugin-router best to only handle manage client route.
        // here support base server route usage, part for compatibility
        var serverBase = serverRoutes.filter(function (route) {
          return route.entryName === entryName;
        }).map(function (route) {
          return route.urlPath;
        }).sort(function (a, b) {
          return a.length - b.length > 0 ? -1 : 1;
        });
        plugins.push({
          name: PLUGIN_IDENTIFIER,
          options: JSON.stringify(_objectSpread(_objectSpread({
            serverBase: serverBase
          }, runtimeConfig.router), {}, {
            routesConfig: fileSystemRoutes ? "{ ".concat(ROUTES_IDENTIFIER, ", globalApp: App }") : undefined
          })).replace(/"routesConfig"\s*:\s*"((\S|\s)+)"/g, '"routesConfig": $1,')
        });
      }

      return {
        entrypoint: entrypoint,
        plugins: plugins
      };
    },
    addRuntimeExports: function addRuntimeExports() {
      pluginsExportsUtils.addExport("export { default as router } from '".concat(runtimeModulePath, "'"));
    }
  };
}, {
  name: '@modern-js/plugin-router',
  required: ['@modern-js/runtime']
});