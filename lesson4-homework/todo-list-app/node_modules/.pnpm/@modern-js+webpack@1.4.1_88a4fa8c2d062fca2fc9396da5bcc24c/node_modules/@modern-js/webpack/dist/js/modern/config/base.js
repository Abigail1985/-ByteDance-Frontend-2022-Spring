/* eslint-disable max-lines */
import path from 'path';
import Chain from 'webpack-chain';
import { isProd, isDev, isProdProfile, isTypescript, ensureAbsolutePath, isString, applyOptionsChain, removeLeadingSlash } from '@modern-js/utils';
import TerserPlugin from 'terser-webpack-plugin';
import CssMinimizerPlugin from 'css-minimizer-webpack-plugin';
import ForkTsCheckerWebpackPlugin from 'fork-ts-checker-webpack-plugin';
import webpack, { IgnorePlugin } from 'webpack';
import MiniCssExtractPlugin from 'mini-css-extract-plugin';
import { merge } from 'webpack-merge';
import WebpackBar from 'webpackbar';
import { createBabelChain } from '@modern-js/babel-chain';
import { CSS_REGEX, JS_REGEX, TS_REGEX, SVG_REGEX, ASSETS_REGEX, CSS_MODULE_REGEX, GLOBAL_CSS_REGEX, JS_RESOLVE_EXTENSIONS, CACHE_DIRECTORY } from "../utils/constants";
import { createCSSRule } from "../utils/createCSSRule";
import { mergeRegex } from "../utils/mergeRegex";
import { getWebpackLogging } from "../utils/getWebpackLogging";
import { getBabelOptions } from "../utils/getBabelOptions";
import { ModuleScopePlugin } from "../plugins/module-scope-plugin";
import { getSourceIncludes } from "../utils/getSourceIncludes";
import { TsConfigPathsPlugin } from "../plugins/ts-config-paths-plugin";
import { getWebpackAliases } from "../utils/getWebpackAliases";

class BaseWebpackConfig {
  constructor(appContext, options) {
    var _this$options$output, _this$options$output2, _this$options$output3;

    this.chain = void 0;
    this.appContext = void 0;
    this.metaName = void 0;
    this.options = void 0;
    this.appDirectory = void 0;
    this.dist = void 0;
    this.jsFilename = void 0;
    this.jsChunkname = void 0;
    this.cssChunkname = void 0;
    this.mediaChunkname = void 0;
    this.babelChain = void 0;
    this.isTsProject = void 0;
    this.appContext = appContext;
    this.appDirectory = this.appContext.appDirectory;
    this.metaName = this.appContext.metaName;
    this.options = options;
    this.chain = new Chain();
    this.dist = ensureAbsolutePath(this.appDirectory, this.options.output ? this.options.output.path : '');
    this.jsFilename = removeLeadingSlash(`${(this.options.output ? this.options.output.jsPath : '').trim()}/[name]${isProd() && !((_this$options$output = this.options.output) !== null && _this$options$output !== void 0 && _this$options$output.disableAssetsCache) ? '.[contenthash:8]' : ''}.js`);
    this.jsChunkname = removeLeadingSlash(`${(this.options.output ? this.options.output.jsPath : '').trim()}/[id]${isProd() && !this.options.output.disableAssetsCache ? '.[contenthash:8]' : ''}.js`);
    this.cssChunkname = removeLeadingSlash(`${(this.options.output ? this.options.output.cssPath : '').trim()}/[name]${isProd() && !((_this$options$output2 = this.options.output) !== null && _this$options$output2 !== void 0 && _this$options$output2.disableAssetsCache) ? '.[contenthash:8]' : ''}.css`);
    this.mediaChunkname = removeLeadingSlash(`${this.options.output ? this.options.output.mediaPath : ''}/[name]${(_this$options$output3 = this.options.output) !== null && _this$options$output3 !== void 0 && _this$options$output3.disableAssetsCache ? '' : '.[hash:8]'}[ext]`);
    this.babelChain = createBabelChain();
    this.isTsProject = isTypescript(this.appDirectory);
  }

  name() {// empty
  }

  mode() {
    const mode = isProd() ? 'production' : 'development';
    this.chain.mode(mode);
    return mode;
  }

  devtool() {
    const {
      output
    } = this.options;
    /* eslint-disable no-nested-ternary */

    this.chain.devtool(isProd() ? output !== null && output !== void 0 && output.disableSourceMap ? false : 'source-map' : 'cheap-module-source-map');
    /* eslint-enable no-nested-ternary */
  }

  entry() {
    const {
      entrypoints = [],
      checkedEntries
    } = this.appContext;

    for (const {
      entryName,
      entry
    } of entrypoints) {
      if (checkedEntries && !checkedEntries.includes(entryName)) {
        continue;
      }

      this.chain.entry(entryName).add(entry);
    }
  }

  output() {
    this.chain.output.hashFunction('xxhash64').filename(this.jsFilename).chunkFilename(this.jsChunkname).globalObject('window').path(this.dist).pathinfo(!isProd()).devtoolModuleFilenameTemplate( // eslint-disable-next-line no-nested-ternary
    isProd() ? info => path.relative(this.appContext.srcDirectory, info.absoluteResourcePath).replace(/\\/g, '/') : isDev() ? info => path.resolve(info.absoluteResourcePath).replace(/\\/g, '/') : undefined).publicPath(this.publicPath());
    this.chain.output.merge({
      assetModuleFilename: this.mediaChunkname,
      environment: {
        arrowFunction: false,
        bigIntLiteral: false,
        const: false,
        destructuring: false,
        dynamicImport: false,
        forOf: false,
        module: false
      }
    });
  }

  publicPath() {
    var _this$options$dev;

    let publicPath =
    /* eslint-disable no-nested-ternary */
    isProd() ? this.options.output ? this.options.output.assetPrefix : '' : isString((_this$options$dev = this.options.dev) === null || _this$options$dev === void 0 ? void 0 : _this$options$dev.assetPrefix) ? this.options.dev.assetPrefix : (this.options.dev ? this.options.dev.assetPrefix : '') ? `//${this.appContext.ip || 'localhost'}:${this.appContext.port || '8080'}/` : '/';
    /* eslint-enable no-nested-ternary */

    if (!publicPath.endsWith('/')) {
      publicPath += '/';
    }

    return publicPath;
  }
  /* eslint-disable max-statements */


  loaders() {
    var _this$options$output4, _this$options$output$, _this$options$output5, _this$options$output6, _this$options$output7, _this$options$output8, _this$options$output9, _this$options$output10;

    this.chain.module.rule('mjs').test(/\.m?js/).resolve.set('fullySpecified', false);
    const loaders = this.chain.module.rule('loaders'); //  js、ts

    const useTsLoader = Boolean((_this$options$output4 = this.options.output) === null || _this$options$output4 === void 0 ? void 0 : _this$options$output4.enableTsLoader);
    loaders.oneOf('js').test(useTsLoader ? JS_REGEX : mergeRegex(JS_REGEX, TS_REGEX)).include.add(this.appContext.srcDirectory).add(this.appContext.internalDirectory).end().use('babel').loader(require.resolve('babel-loader')).options(getBabelOptions(this.metaName, this.appDirectory, this.options, this.chain.get('name'), this.babelChain));

    if (useTsLoader) {
      var _this$options$tools;

      loaders.oneOf('ts').test(TS_REGEX).include.add(this.appContext.srcDirectory).add(this.appContext.internalDirectory).end().use('babel').loader(require.resolve('babel-loader')).options({
        presets: [[require.resolve('@modern-js/babel-preset-app'), {
          metaName: this.metaName,
          appDirectory: this.appDirectory,
          target: 'client',
          useTsLoader: true,
          useBuiltIns: this.options.output.polyfill === 'ua' ? false : this.options.output.polyfill
        }]]
      }).end().use('ts').loader(require.resolve('ts-loader')).options(applyOptionsChain({
        compilerOptions: {
          target: 'es5',
          module: 'ESNext'
        },
        transpileOnly: false,
        allowTsInNodeModules: true
      }, (_this$options$tools = this.options.tools) === null || _this$options$tools === void 0 ? void 0 : _this$options$tools.tsLoader));
    }

    const includes = getSourceIncludes(this.appDirectory, this.options);

    if (includes.length > 0) {
      const includeRegex = mergeRegex(...includes);

      const testResource = resource => includeRegex.test(resource);

      loaders.oneOf('js').include.add(testResource);
      loaders.oneOfs.has('ts') && loaders.oneOf('ts').include.add(testResource);
    }

    const disableCssModuleExtension = (_this$options$output$ = (_this$options$output5 = this.options.output) === null || _this$options$output5 === void 0 ? void 0 : _this$options$output5.disableCssModuleExtension) !== null && _this$options$output$ !== void 0 ? _this$options$output$ : false; // css

    createCSSRule(this.chain, {
      appDirectory: this.appDirectory,
      config: this.options
    }, {
      name: 'css',
      // when disableCssModuleExtension is true,
      // only transfer *.global.css in css-loader
      test: disableCssModuleExtension ? GLOBAL_CSS_REGEX : CSS_REGEX,
      exclude: [CSS_MODULE_REGEX]
    }, {
      importLoaders: 1,
      esModule: false,
      sourceMap: isProd() && !((_this$options$output6 = this.options.output) !== null && _this$options$output6 !== void 0 && _this$options$output6.disableSourceMap)
    }); // css modules

    createCSSRule(this.chain, {
      appDirectory: this.appDirectory,
      config: this.options
    }, {
      name: 'css-modules',
      test: disableCssModuleExtension ? CSS_REGEX : CSS_MODULE_REGEX,
      exclude: disableCssModuleExtension ? [/node_modules/, GLOBAL_CSS_REGEX] : [],
      genTSD: (_this$options$output7 = this.options.output) === null || _this$options$output7 === void 0 ? void 0 : _this$options$output7.enableCssModuleTSDeclaration
    }, {
      importLoaders: 1,
      esModule: false,
      modules: {
        localIdentName: this.options.output ? this.options.output.cssModuleLocalIdentName : '',
        exportLocalsConvention: 'camelCase'
      },
      sourceMap: isProd() && !((_this$options$output8 = this.options.output) !== null && _this$options$output8 !== void 0 && _this$options$output8.disableSourceMap)
    }); // svg

    loaders.oneOf('svg-inline').test(SVG_REGEX).type('javascript/auto').resourceQuery(/inline/).use('svgr').loader(require.resolve('@svgr/webpack')).options({
      svgo: false
    }).end().use('url').loader(require.resolve('url-loader')).options({
      limit: Infinity,
      name: this.mediaChunkname.replace(/\[ext\]$/, '.[ext]')
    });
    loaders.oneOf('svg-url').test(SVG_REGEX).type('javascript/auto').resourceQuery(/url/).use('svgr').loader(require.resolve('@svgr/webpack')).options({
      svgo: false
    }).end().use('url').loader(require.resolve('url-loader')).options({
      limit: false,
      name: this.mediaChunkname.replace(/\[ext\]$/, '.[ext]')
    });
    loaders.oneOf('svg').test(SVG_REGEX).type('javascript/auto').use('svgr').loader(require.resolve('@svgr/webpack')).options({
      svgo: false
    }).end().use('url').loader(require.resolve('url-loader')).options({
      limit: (_this$options$output9 = this.options.output) === null || _this$options$output9 === void 0 ? void 0 : _this$options$output9.dataUriLimit,
      name: this.mediaChunkname.replace(/\[ext\]$/, '.[ext]')
    }); // img, font assets

    loaders.oneOf('assets-inline').test(ASSETS_REGEX).type('asset/inline').resourceQuery(/inline/);
    loaders.oneOf('assets-url').test(ASSETS_REGEX).type('asset/resource').resourceQuery(/url/);
    loaders.oneOf('assets').test(ASSETS_REGEX).type('asset').parser({
      dataUrlCondition: {
        maxSize: (_this$options$output10 = this.options.output) === null || _this$options$output10 === void 0 ? void 0 : _this$options$output10.dataUriLimit
      }
    }); // yml,toml, markdown

    loaders.oneOf('yml').test(/\.ya?ml$/).use('json').loader(require.resolve('json-loader')).end().use('yaml').loader('yaml-loader');
    loaders.oneOf('toml').test(/\.toml$/).use('toml').loader(require.resolve('toml-loader'));
    loaders.oneOf('markdown').test(/\.md$/).use('html').loader(require.resolve('html-loader')).end().use('markdown').loader('markdown-loader'); //  resource fallback

    loaders.oneOf('fallback').exclude.add(/^$/).add(JS_REGEX).add(TS_REGEX).add(CSS_REGEX).add(CSS_MODULE_REGEX).add(/\.(html?|json|wasm|ya?ml|toml|md)$/).end().use('file').loader(require.resolve('file-loader'));
    return loaders;
  }
  /* eslint-enable max-statements */


  plugins() {
    // progress bar
    process.stdout.isTTY && this.chain.plugin('progress').use(WebpackBar, [{
      name: this.chain.get('name')
    }]);
    this.chain.plugin('mini-css-extract').use(MiniCssExtractPlugin, [{
      filename: this.cssChunkname,
      chunkFilename: this.cssChunkname,
      ignoreOrder: true
    }]);
    this.chain.plugin('ignore').use(IgnorePlugin, [{
      resourceRegExp: /^\.\/locale$/,
      contextRegExp: /moment$/
    }]);
    const {
      output
    } = this.options;

    if ( // only enable ts-checker plugin in ts project
    this.isTsProject && // no need to use ts-checker plugin when using ts-loader
    !output.enableTsLoader && !output.disableTsChecker) {
      this.chain.plugin('ts-checker').use(ForkTsCheckerWebpackPlugin, [{
        typescript: {
          // avoid OOM issue
          memoryLimit: 8192,
          // use tsconfig of user project
          configFile: path.resolve(this.appDirectory, './tsconfig.json'),
          // use typescript of user project
          typescriptPath: require.resolve('typescript')
        },
        issue: {
          include: [{
            file: '**/src/**/*'
          }],
          exclude: [{
            file: '**/*.(spec|test).ts'
          }]
        }
      }]);
    }
  }
  /* eslint-disable  max-statements */


  resolve() {
    var _this$options$source, _this$options$source2;

    // resolve extensions
    const extensions = JS_RESOLVE_EXTENSIONS.filter(ext => this.isTsProject || !ext.includes('ts'));

    for (const ext of extensions) {
      this.chain.resolve.extensions.add(ext);
    } //  resolve alias


    const defaultAlias = getWebpackAliases(this.appContext, this.options._raw);
    const alias = applyOptionsChain(defaultAlias, (_this$options$source = this.options.source) === null || _this$options$source === void 0 ? void 0 : _this$options$source.alias);

    for (const name of Object.keys(alias)) {
      this.chain.resolve.alias.set(name, (Array.isArray(alias[name]) ? alias[name] : [alias[name]]).map(a => ensureAbsolutePath(this.appDirectory, a)));
    } //  resolve modules


    this.chain.resolve.modules.add('node_modules').add(this.appContext.nodeModulesDirectory);
    let defaultScopes = ['./src', /node_modules/, './shared'];
    const scopeOptions = (_this$options$source2 = this.options.source) === null || _this$options$source2 === void 0 ? void 0 : _this$options$source2.moduleScopes;

    if (Array.isArray(scopeOptions)) {
      if (scopeOptions.some(s => typeof s === 'function')) {
        for (const scope of scopeOptions) {
          if (typeof scope === 'function') {
            const ret = scope(defaultScopes);
            defaultScopes = ret ? ret : defaultScopes;
          } else {
            defaultScopes.push(scope);
          }
        }
      } else {
        defaultScopes.push(...scopeOptions);
      }
    } // resolve plugin(module scope)


    this.chain.resolve.plugin('module-scope').use(ModuleScopePlugin, [{
      appSrc: defaultScopes.map(scope => {
        if (isString(scope)) {
          return ensureAbsolutePath(this.appDirectory, scope);
        }

        return scope;
      }),
      allowedFiles: [path.resolve(this.appDirectory, './package.json')]
    }]);

    if (this.isTsProject) {
      // aliases from tsconfig.json
      this.chain.resolve.plugin('ts-config-paths').use(TsConfigPathsPlugin, [this.appDirectory]);
    }
  }
  /* eslint-enable  max-statements */


  cache() {
    this.chain.cache({
      type: 'filesystem',
      cacheDirectory: path.resolve(this.appDirectory, CACHE_DIRECTORY, 'webpack'),
      buildDependencies: {
        defaultWebpack: [require.resolve('webpack/lib')],
        config: [__filename, this.appContext.configFile].filter(Boolean),
        tsconfig: [this.isTsProject && path.resolve(this.appDirectory, './tsconfig.json')].filter(Boolean)
      }
    });
  }

  optimization() {
    var _this$options$output11, _this$options$tools2, _this$options$tools3;

    this.chain.optimization.minimize(isProd() && !((_this$options$output11 = this.options.output) !== null && _this$options$output11 !== void 0 && _this$options$output11.disableMinimize)).splitChunks({
      chunks: 'all'
    }).runtimeChunk({
      name: entrypoint => `runtime-${entrypoint.name}`
    }).minimizer('js').use(TerserPlugin, [applyOptionsChain({
      terserOptions: {
        parse: {
          ecma: 8
        },
        compress: {
          ecma: 5,
          warnings: false,
          comparisons: false,
          inline: 2
        },
        mangle: {
          safari10: true
        },
        // Added for profiling in devtools
        keep_classnames: isProdProfile(),
        keep_fnames: isProdProfile(),
        output: {
          ecma: 5,
          ascii_only: true
        }
      }
    }, (_this$options$tools2 = this.options.tools) === null || _this$options$tools2 === void 0 ? void 0 : _this$options$tools2.terser)]).end().minimizer('css') // FIXME: add `<any>` reason: Since the css-minimizer-webpack-plugin has been updated
    .use(CssMinimizerPlugin, [applyOptionsChain({}, (_this$options$tools3 = this.options.tools) === null || _this$options$tools3 === void 0 ? void 0 : _this$options$tools3.minifyCss)]);
  }

  stats() {
    this.chain.stats('none');
    this.chain.merge({
      infrastructureLogging: getWebpackLogging()
    });
  }

  config() {
    var _this$options$tools4;

    const chainConfig = this.getChain().toConfig();

    if ((_this$options$tools4 = this.options.tools) !== null && _this$options$tools4 !== void 0 && _this$options$tools4.webpackFinal) {
      var _this$options$tools5;

      return applyOptionsChain(chainConfig, (_this$options$tools5 = this.options.tools) === null || _this$options$tools5 === void 0 ? void 0 : _this$options$tools5.webpackFinal, {
        name: this.chain.get('name'),
        webpack
      }, merge);
    }

    return chainConfig;
  }

  getChain() {
    var _this$options$tools6, _this$options$tools7;

    this.chain.context(this.appDirectory);
    this.chain.bail(isProd());
    this.chain.node.set('global', true);
    this.name();
    this.mode();
    this.devtool();
    this.entry();
    this.output();
    const loaders = this.loaders();
    this.plugins();
    this.resolve();
    this.cache();
    this.optimization();
    this.stats();
    loaders.oneOf('js').use('babel').options(applyOptionsChain(loaders.oneOf('js').use('babel').get('options'), (_this$options$tools6 = this.options.tools) === null || _this$options$tools6 === void 0 ? void 0 : _this$options$tools6.babel, {
      chain: this.babelChain
    }));
    const config = this.chain.toConfig();
    applyOptionsChain(config, (_this$options$tools7 = this.options.tools) === null || _this$options$tools7 === void 0 ? void 0 : _this$options$tools7.webpack, {
      chain: this.chain,
      name: this.chain.get('name'),
      webpack
    }, merge);
    return this.chain;
  }

}

export { BaseWebpackConfig };
/* eslint-enable max-lines */