function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { isProdProfile, isTypescript, readTsConfig, chalk } from '@modern-js/utils';

const verifyTsConfigPaths = (root, userConfig) => {
  var _userConfig$source, _readTsConfig$compile;

  const userAliases = (_userConfig$source = userConfig.source) === null || _userConfig$source === void 0 ? void 0 : _userConfig$source.alias;

  if (!userAliases) {
    return;
  }

  const paths = Object.keys(((_readTsConfig$compile = readTsConfig(root).compilerOptions) === null || _readTsConfig$compile === void 0 ? void 0 : _readTsConfig$compile.paths) || {}).map(key => key.replace(/\/\*$/, ''));
  Object.keys(userAliases).forEach(name => {
    if (paths.includes(name)) {
      throw new Error(chalk.red(`It looks like you have configured the alias ${chalk.bold(name)} in both the modern.config file and tsconfig.json.\n Please remove the configuration in modern.config file and just keep the configuration in tsconfig.json.`));
    }
  });
};

export const getWebpackAliases = (appContext, userConfig) => {
  if (isTypescript(appContext.appDirectory)) {
    verifyTsConfigPaths(appContext.appDirectory, userConfig);
  }

  return _objectSpread({
    [appContext.internalDirAlias]: appContext.internalDirectory,
    [appContext.internalSrcAlias]: appContext.srcDirectory,
    '@': appContext.srcDirectory,
    '@shared': appContext.sharedDirectory,
    'react-native': 'react-native-web'
  }, isProdProfile() && {
    'react-dom$': 'react-dom/profiling',
    'scheduler/tracing': 'scheduler/tracing-profiling'
  });
};