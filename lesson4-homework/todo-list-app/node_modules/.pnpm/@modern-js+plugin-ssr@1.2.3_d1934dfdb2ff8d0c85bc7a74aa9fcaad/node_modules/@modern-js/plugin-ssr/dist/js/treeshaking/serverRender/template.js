function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import fs from 'fs';

var readFile = function readFile(filepath) {
  if (fs.existsSync(filepath)) {
    return fs.readFileSync(filepath, 'utf-8');
  } else {
    return null;
  }
};

var VARIABLE_REG_EXP = /<!--<\?([-=+])\s*(.*?)\s*\?>-->/;
var VARIABLE_SPLITTER = /(<!--<\?.*?\?>-->)/;
var ENCODE_HTML_RULES = {
  '&': '&amp;',
  '<': '&lt;',
  '>': '&gt;',
  '"': '&#34;',
  "'": '&#39;'
};
var MATCH_HTML = /[&<>'"]/g;

function encodeChar(c) {
  return ENCODE_HTML_RULES[c] || c;
}

function escape(str) {
  return str.replace(MATCH_HTML, encodeChar);
}

export var Fragment = /*#__PURE__*/function () {
  function Fragment(template) {
    _classCallCheck(this, Fragment);

    this.isVariable = void 0;
    this.content = void 0;
    this.filters = void 0;
    this.path = void 0;
    var match = VARIABLE_REG_EXP.exec(template);

    if (match) {
      var _match = _slicedToArray(match, 3),
          filterFlag = _match[1],
          content = _match[2];

      this.isVariable = true;
      this.content = content;
      this.filters = [Fragment.filterMap[filterFlag]];
      this.path = content.replace(/\[['"](.*?)['"]\]/g, '.$1').split('.');
    } else {
      this.isVariable = false;
      this.content = template;
      this.filters = [];
      this.path = [];
    }
  }

  _createClass(Fragment, [{
    key: "getValue",
    value: function getValue(data) {
      if (this.isVariable) {
        var value = this.path.reduce(function (p, n) {
          return p != null ? p[n] : p;
        }, data);
        return this.filters.reduce(function (p, n) {
          return n(p);
        }, value != null ? value : '');
      }

      return this.content;
    }
  }]);

  return Fragment;
}();
Fragment.filterMap = {
  '=': escape,
  '-': function _(v) {
    return v;
  }
};
var fragmentListMap = {};
export function toFragments(filename) {
  if (fragmentListMap[filename]) {
    return fragmentListMap[filename];
  } // 未开启现代构建的项目无 -es6.html


  var template = readFile(filename);

  if (!template) {
    throw new Error("Could not find template file: ".concat(filename));
  }

  var fragmentList = template.split(VARIABLE_SPLITTER).filter(function (v) {
    return Boolean(v);
  }).map(function (v) {
    return new Fragment(v);
  });
  fragmentListMap[filename] = fragmentList;
  return fragmentList;
}