import { URL } from 'url';
import qs from 'querystring';
import { toMessage } from "../../utils";
export class ModernServerContext {
  /**
   * http request
   */

  /**
   * http response
   */

  /**
   * url params
   */
  constructor(req, res) {
    this.req = void 0;
    this.res = void 0;
    this.params = {};
    this.logger = void 0;
    this.metrics = void 0;
    this.serverData = void 0;
    this.req = req;
    this.res = res;
    this.logger = req.logger;
    this.metrics = req.metrics;
    this.serverData = {};
    this.bind();
  }

  bind() {
    const {
      req,
      res
    } = this;

    req.get = key => this.getReqHeader(key);

    res.set = (key, value) => this.res.setHeader(key, value);
  }

  setParams(params) {
    this.params = params;
  }

  setServerData(key, value) {
    this.serverData[key] = value;
  }

  getReqHeader(key) {
    const {
      req
    } = this;
    const field = key.toLowerCase();

    switch (field) {
      case 'referer':
      case 'referrer':
        return req.headers.referrer || req.headers.referer || '';

      default:
        return req.headers[field] || '';
    }
  }
  /* request property */


  get headers() {
    return this.req.headers;
  }

  get method() {
    return this.req.method;
  }

  get url() {
    return this.req.url || '';
  }

  set url(val) {
    this.req.url = val;
  }

  get host() {
    let host = this.getReqHeader('X-Forwarded-Host');

    if (!host) {
      host = this.getReqHeader('Host');
    }

    return host.split(/\s*,\s*/, 1)[0] || '';
  }

  get protocol() {
    if (this.req.socket.encrypted) {
      return 'https';
    }

    const proto = this.getReqHeader('X-Forwarded-Proto');
    return proto ? proto.split(/\s*,\s*/, 1)[0] : 'http';
  }

  get origin() {
    return `${this.protocol}://${this.host}`;
  }

  get href() {
    return this.origin + this.url;
  }

  get parsedURL() {
    const url = new URL(this.req.url, this.origin);
    return url;
  }

  get path() {
    return this.parsedURL.pathname;
  }

  set path(p) {
    const url = new URL(this.req.url, this.origin); // this should never happend

    if (!url || !p) {
      return;
    }

    if (url.pathname === p) {
      return;
    }

    url.pathname = p;
    this.url = url.toString();
  }

  get querystring() {
    if (!this.req) {
      return '';
    }

    return this.parsedURL.search.replace(/^\?/, '') || '';
  }

  get query() {
    const str = this.querystring;
    return qs.parse(str);
  }
  /* response property */


  get status() {
    return this.res.statusCode;
  }

  set status(statusCode) {
    this.res.statusCode = statusCode;
  }
  /**
   * 判断链接是否已经关闭
   */


  resHasHandled() {
    return this.res.writableEnded;
  }

  logInfo() {
    return {
      headers: this.headers,
      href: this.href,
      url: this.url
    };
  }

  error(dig, err = '') {
    const message = toMessage(dig, err);
    const reqInfo = this.logInfo();
    this.logger.error(`${reqInfo.url} - ${message}`, reqInfo);
  }

}