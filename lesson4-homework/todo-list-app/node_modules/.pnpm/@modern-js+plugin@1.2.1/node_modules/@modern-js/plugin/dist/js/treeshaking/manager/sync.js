function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

// eslint-disable-next-line eslint-comments/disable-enable-pair

/* eslint-disable max-lines */
import { isPipeline, createPipeline, runWithContainer, createContainer } from 'farrow-pipeline';
import { isWaterfall, createWaterfall, isAsyncWaterfall, createAsyncWaterfall } from "../waterfall";
import { isWorkflow, createWorkflow, isAsyncWorkflow, createAsyncWorkflow, isParallelWorkflow, createParallelWorkflow } from "../workflow";
import { RunnerContext, useRunner } from "./runner"; // eslint-disable-next-line @typescript-eslint/no-invalid-void-type

var SYNC_PLUGIN_SYMBOL = 'SYNC_PLUGIN_SYMBOL';
export var DEFAULT_OPTIONS = {
  name: 'untitled',
  pre: [],
  post: [],
  rivals: [],
  required: []
};
export var createManager = function createManager(processes) {
  var index = 0;

  var createPlugin = function createPlugin(initializer) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    return _objectSpread(_objectSpread(_objectSpread({}, DEFAULT_OPTIONS), {}, {
      name: "No.".concat(index++, " plugin")
    }, options), {}, {
      SYNC_PLUGIN_SYMBOL: SYNC_PLUGIN_SYMBOL,
      initializer: initializer
    });
  };

  var isPlugin = function isPlugin(input) {
    return hasOwnProperty(input, SYNC_PLUGIN_SYMBOL) && input[SYNC_PLUGIN_SYMBOL] === SYNC_PLUGIN_SYMBOL;
  };

  var registe = function registe(extraProcesses) {
    // eslint-disable-next-line no-param-reassign
    processes = _objectSpread(_objectSpread({}, extraProcesses), processes);
  };

  var clone = function clone() {
    var plugins = [];

    var usePlugin = function usePlugin() {
      for (var _len = arguments.length, input = new Array(_len), _key = 0; _key < _len; _key++) {
        input[_key] = arguments[_key];
      }

      for (var _i = 0, _input = input; _i < _input.length; _i++) {
        var plugin = _input[_i];

        if (isPlugin(plugin)) {
          if (!includePlugin(plugins, plugin)) {
            plugins.push(_objectSpread(_objectSpread({}, plugin), {}, {
              index: plugins.length
            }));
          }
        } else {
          // eslint-disable-next-line @typescript-eslint/ban-ts-comment
          // @ts-expect-error
          console.warn("Unknown plugin: ".concat(plugin.name));
        }
      }

      return {
        createPlugin: createPlugin,
        isPlugin: isPlugin,
        usePlugin: usePlugin,
        init: init,
        run: run,
        clear: clear,
        registe: registe,
        useRunner: useRunner,
        clone: clone
      };
    };

    var clear = function clear() {
      plugins = [];
    };

    var currentContainer = createContainer();

    var init = function init(options) {
      var container = (options === null || options === void 0 ? void 0 : options.container) || currentContainer;
      var sortedPlugins = sortPlugins(plugins);
      checkPlugins(sortedPlugins);
      var hooksList = sortedPlugins.map(function (plugin) {
        return runWithContainer(function () {
          return plugin.initializer();
        }, container);
      });
      return generateRunner(hooksList, container, processes);
    };

    var run = function run(cb, options) {
      var container = (options === null || options === void 0 ? void 0 : options.container) || currentContainer;
      return runWithContainer(cb, container);
    };

    return {
      createPlugin: createPlugin,
      isPlugin: isPlugin,
      usePlugin: usePlugin,
      init: init,
      clear: clear,
      run: run,
      registe: registe,
      useRunner: useRunner,
      clone: clone
    };
  };

  return clone();
};
export var generateRunner = function generateRunner(hooksList, container, processes) {
  var runner = {};
  var cloneShape = cloneProgressRecord(processes);

  if (processes) {
    var _loop = function _loop(key) {
      var _iterator = _createForOfIteratorHelper(hooksList),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var hooks = _step.value;

          if (!hooks) {
            continue;
          }

          if (hooks[key]) {
            // eslint-disable-next-line @typescript-eslint/ban-ts-comment
            // @ts-expect-error
            cloneShape[key].use(hooks[key]);
          }
        } // eslint-disable-next-line @typescript-eslint/ban-ts-comment
        // @ts-expect-error

      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      runner[key] = function (input, options) {
        return cloneShape[key].run(input, _objectSpread({
          container: container
        }, options));
      };
    };

    for (var key in cloneShape) {
      _loop(key);
    }
  }

  container.write(RunnerContext, runner);
  return runner;
};
export var cloneProgress = function cloneProgress(progress) {
  if (isWaterfall(progress)) {
    return createWaterfall();
  }

  if (isAsyncWaterfall(progress)) {
    return createAsyncWaterfall();
  }

  if (isWorkflow(progress)) {
    return createWorkflow();
  }

  if (isAsyncWorkflow(progress)) {
    return createAsyncWorkflow();
  }

  if (isParallelWorkflow(progress)) {
    return createParallelWorkflow();
  }

  if (isPipeline(progress)) {
    return createPipeline();
  } // eslint-disable-next-line @typescript-eslint/restrict-template-expressions


  throw new Error("Unknown progress: ".concat(progress));
}; // eslint-disable-next-line @typescript-eslint/no-invalid-void-type

export var cloneProgressRecord = function cloneProgressRecord(record) {
  if (!record) {
    return record;
  }

  var result = {};

  for (var key in record) {
    // eslint-disable-next-line @typescript-eslint/ban-ts-comment
    // @ts-expect-error
    result[key] = cloneProgress(record[key]);
  }

  return result;
};

var includePlugin = function includePlugin(plugins, input) {
  var _iterator2 = _createForOfIteratorHelper(plugins),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var plugin = _step2.value;

      if (plugin.name === input.name) {
        return true;
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return false;
};

var sortPlugins = function sortPlugins(input) {
  var plugins = input.slice();

  for (var i = 0; i < plugins.length; i++) {
    var plugin = plugins[i];

    var _iterator3 = _createForOfIteratorHelper(plugin.pre),
        _step3;

    try {
      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
        var pre = _step3.value;

        for (var j = i + 1; j < plugins.length; j++) {
          if (plugins[j].name === pre) {
            plugins = [].concat(_toConsumableArray(plugins.slice(0, i)), [plugins[j]], _toConsumableArray(plugins.slice(i, j)), _toConsumableArray(plugins.slice(j + 1, plugins.length)));
          }
        }
      }
    } catch (err) {
      _iterator3.e(err);
    } finally {
      _iterator3.f();
    }

    var _iterator4 = _createForOfIteratorHelper(plugin.post),
        _step4;

    try {
      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
        var post = _step4.value;

        for (var _j = 0; _j < i; _j++) {
          if (plugins[_j].name === post) {
            plugins = [].concat(_toConsumableArray(plugins.slice(0, _j)), _toConsumableArray(plugins.slice(_j + 1, i + 1)), [plugins[_j]], _toConsumableArray(plugins.slice(i + 1, plugins.length)));
          }
        }
      }
    } catch (err) {
      _iterator4.e(err);
    } finally {
      _iterator4.f();
    }
  }

  return plugins;
};

var checkPlugins = function checkPlugins(plugins) {
  var _iterator5 = _createForOfIteratorHelper(plugins),
      _step5;

  try {
    for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
      var origin = _step5.value;

      var _iterator6 = _createForOfIteratorHelper(origin.rivals),
          _step6;

      try {
        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {
          var rival = _step6.value;

          var _iterator8 = _createForOfIteratorHelper(plugins),
              _step8;

          try {
            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {
              var plugin = _step8.value;

              if (rival === plugin.name) {
                throw new Error("".concat(origin.name, " has rival ").concat(plugin.name));
              }
            }
          } catch (err) {
            _iterator8.e(err);
          } finally {
            _iterator8.f();
          }
        }
      } catch (err) {
        _iterator6.e(err);
      } finally {
        _iterator6.f();
      }

      var _iterator7 = _createForOfIteratorHelper(origin.required),
          _step7;

      try {
        var _loop2 = function _loop2() {
          var required = _step7.value;

          if (!plugins.some(function (plugin) {
            return plugin.name === required;
          })) {
            throw new Error("The plugin: ".concat(required, " is required when plugin: ").concat(origin.name, " is exist."));
          }
        };

        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {
          _loop2();
        }
      } catch (err) {
        _iterator7.e(err);
      } finally {
        _iterator7.f();
      }
    }
  } catch (err) {
    _iterator5.e(err);
  } finally {
    _iterator5.f();
  }
};

export var hasOwnProperty = function hasOwnProperty(obj, prop) {
  return obj.hasOwnProperty(prop);
};