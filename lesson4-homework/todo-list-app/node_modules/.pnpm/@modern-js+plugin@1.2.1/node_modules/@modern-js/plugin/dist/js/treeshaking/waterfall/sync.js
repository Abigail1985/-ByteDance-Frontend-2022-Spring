function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import { useContainer, createPipeline } from 'farrow-pipeline';
var WATERFALL_SYMBOL = Symbol('WATERFALL_SYMBOL');
export var getBrook = function getBrook(input) {
  if (typeof input === 'function') {
    return input;
  } else if (input && typeof input.middleware === 'function') {
    return input.middleware;
  } // eslint-disable-next-line @typescript-eslint/no-base-to-string,@typescript-eslint/restrict-template-expressions


  throw new Error("".concat(input, " is not a Brook or { brook: Brook }"));
};
// eslint-disable-next-line @typescript-eslint/no-invalid-void-type
export var createWaterfall = function createWaterfall() {
  var pipeline = createPipeline();

  var use = function use() {
    for (var _len = arguments.length, brooks = new Array(_len), _key = 0; _key < _len; _key++) {
      brooks[_key] = arguments[_key];
    }

    pipeline.use.apply(pipeline, _toConsumableArray(brooks.map(getBrook).map(mapBrookToMiddleware)));
    return waterfall;
  };

  var run = function run(input, options) {
    return (// eslint-disable-next-line @typescript-eslint/no-shadow
      pipeline.run(input, _objectSpread(_objectSpread({}, options), {}, {
        onLast: function onLast(input) {
          return input;
        }
      }))
    );
  };

  var middleware = function middleware(input) {
    // eslint-disable-next-line react-hooks/rules-of-hooks
    var container = useContainer(); // eslint-disable-next-line @typescript-eslint/no-shadow

    return pipeline.run(input, {
      container: container,
      onLast: function onLast(input) {
        return input;
      }
    });
  };

  var waterfall = _objectSpread(_objectSpread({}, pipeline), {}, _defineProperty({
    use: use,
    run: run,
    middleware: middleware
  }, WATERFALL_SYMBOL, true));

  return waterfall;
};
export var isWaterfall = function isWaterfall(input) {
  return Boolean(input === null || input === void 0 ? void 0 : input[WATERFALL_SYMBOL]);
};

var mapBrookToMiddleware = function mapBrookToMiddleware(brook) {
  return function (input, next) {
    return next(brook(input));
  };
};