import { ProgressRecord, Progresses2Threads, Progresses2Runners, PluginOptions, ClearDraftProgress, InitOptions } from './sync';
export declare type AsyncInitializer<O> = () => void | O | Promise<O | void>;
declare const ASYNC_PLUGIN_SYMBOL = "ASYNC_PLUGIN_SYMBOL";
export declare type AsyncPlugin<O> = {
  initializer: AsyncInitializer<O>;
  ASYNC_PLUGIN_SYMBOL: typeof ASYNC_PLUGIN_SYMBOL;
} & Required<PluginOptions>;
export declare type IndexAsyncPlugin<O> = AsyncPlugin<O> & {
  index: number;
};
export declare type AsyncPlugins<O> = AsyncPlugin<O>[];
export declare type AsyncIndexPlugins<O> = IndexAsyncPlugin<O>[];
export declare type AsyncPluginFromAsyncManager<M extends AsyncManager<any, any>> = M extends AsyncManager<infer EP, infer PR> ? AsyncPlugin<Partial<Progresses2Threads<PR & ClearDraftProgress<EP>>>> : never;
export declare type PluginFromAsyncManager<M extends AsyncManager<any, any>> = M extends AsyncManager<infer EP, infer PR> ? AsyncPlugin<Partial<Progresses2Threads<PR & ClearDraftProgress<EP>>>> : never;
export declare type AsyncManager<EP extends Record<string, any>, PR extends ProgressRecord | void = void> = {
  createPlugin: (initializer: AsyncInitializer<Partial<Progresses2Threads<PR & ClearDraftProgress<EP>>>>, options?: PluginOptions) => AsyncPlugin<Partial<Progresses2Threads<PR & ClearDraftProgress<EP>>>>;
  isPlugin: (input: Record<string, unknown>) => input is AsyncPlugin<Partial<Progresses2Threads<PR & ClearDraftProgress<EP>>>>;
  usePlugin: (...input: AsyncPlugins<Partial<Progresses2Threads<PR & ClearDraftProgress<EP>>>>) => AsyncManager<EP, PR>;
  init: (options?: InitOptions) => Promise<Progresses2Runners<PR & ClearDraftProgress<EP>>>;
  run: <O>(cb: () => O, options?: InitOptions) => O;
  registe: (newShape: Partial<EP>) => void;
  clone: () => AsyncManager<EP, PR>;
  clear: () => void;
  useRunner: () => Progresses2Runners<PR & ClearDraftProgress<EP>>;
};
export declare const createAsyncManager: <EP extends Record<string, any> = {}, PR extends void | ProgressRecord = void>(processes?: PR | undefined) => AsyncManager<EP, PR>;
export {};