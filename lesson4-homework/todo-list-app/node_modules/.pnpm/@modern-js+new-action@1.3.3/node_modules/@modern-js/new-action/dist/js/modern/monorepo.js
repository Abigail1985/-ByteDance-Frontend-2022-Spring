import _merge from "lodash/merge";
import { CodeSmith } from '@modern-js/codesmith';
import { i18n } from '@modern-js/generator-common';
import { getPackageManager } from '@modern-js/generator-utils';
import { alreadyRepo } from "./utils";
const REPO_GENERAROE = '@modern-js/repo-generator';
export const MonorepoNewAction = async options => {
  const {
    locale = 'zh',
    distTag = '',
    debug = false,
    registry = '',
    config = '{}',
    plugins = [],
    cwd = process.cwd()
  } = options;
  let UserConfig = {};

  try {
    UserConfig = JSON.parse(config);
  } catch (e) {
    throw new Error('config is not a valid json');
  }

  i18n.changeLanguage({
    locale: UserConfig.locale || locale
  });
  const smith = new CodeSmith({
    debug,
    registryUrl: registry
  });

  if (!alreadyRepo(cwd)) {
    smith.logger.warn('not valid modern.js repo');
  }

  const finalConfig = _merge(UserConfig, {
    locale: UserConfig.locale || locale,
    packageManager: UserConfig.packageManager || (await getPackageManager(cwd)),
    isMonorepo: true,
    distTag,
    plugins
  });

  let generator = REPO_GENERAROE;

  if (process.env.CODESMITH_ENV === 'development') {
    generator = require.resolve(generator);
  } else if (distTag) {
    generator = `${generator}@${distTag}`;
  }

  const task = [{
    name: generator,
    config: finalConfig
  }];
  await smith.forge({
    tasks: task.map(runner => ({
      generator: runner.name,
      config: runner.config
    })),
    pwd: cwd
  });
};