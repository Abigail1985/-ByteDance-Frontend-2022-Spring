"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.alreadyRepo = alreadyRepo;
exports.hasEnabledFunction = hasEnabledFunction;
exports.readJson = void 0;

var _path = _interopRequireDefault(require("path"));

var _json = _interopRequireDefault(require("json5"));

var _generatorUtils = require("@modern-js/generator-utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function alreadyRepo(cwd = process.cwd()) {
  try {
    return _generatorUtils.fs.existsSync(_path.default.resolve(cwd, 'package.json'));
  } catch (e) {
    return false;
  }
}

const readJson = jsonPath => {
  if (!_generatorUtils.fs.existsSync(jsonPath)) {
    return {};
  }

  const jsonStr = _generatorUtils.fs.readFileSync(jsonPath, {
    encoding: 'utf8'
  });

  try {
    return _json.default.parse(jsonStr);
  } catch (error) {
    throw Error(`${jsonPath} is not a valid json, please check and try again.`);
  }
}; // eslint-disable-next-line max-params


exports.readJson = readJson;

function hasEnabledFunction(action, dependencies, devDependencies, peerDependencies, cwd) {
  const packageJsonPath = _path.default.normalize(`${cwd}/package.json`);

  const packageJson = readJson(packageJsonPath);

  if (!dependencies[action] && !devDependencies[action]) {
    return false;
  }

  if (dependencies[action]) {
    return (packageJson.dependencies || {})[dependencies[action]];
  }

  if (peerDependencies[action]) {
    return (packageJson.peerDependencies || {})[peerDependencies[action]];
  }

  if (!peerDependencies[action] && devDependencies[action]) {
    return (packageJson.devDependencies || {})[devDependencies[action]];
  }

  return false;
}