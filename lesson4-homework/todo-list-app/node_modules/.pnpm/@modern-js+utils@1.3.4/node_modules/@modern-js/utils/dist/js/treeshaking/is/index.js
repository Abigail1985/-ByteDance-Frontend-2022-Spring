import fs from 'fs';
import path from 'path';
import { isDev } from "./node-env";
/**
 * Check if the package name is in dependencies or devDependencies.
 *
 * @param appDirectory - Project root directory.
 * @param name - Package name.
 * @returns True if the name is in dependencies or devDependencies, false otherwise.
 */

export var isDepExists = function isDepExists(appDirectory, name) {
  var json = require(path.resolve(appDirectory, './package.json'));

  var _json$dependencies = json.dependencies,
      dependencies = _json$dependencies === void 0 ? {} : _json$dependencies,
      _json$devDependencies = json.devDependencies,
      devDependencies = _json$devDependencies === void 0 ? {} : _json$devDependencies;
  return dependencies.hasOwnProperty(name) || devDependencies.hasOwnProperty(name);
};
/**
 * Is typescript project.
 *
 * @param root - App directory.
 * @returns Whether to use typescript.
 */

export var isTypescript = function isTypescript(root) {
  return fs.existsSync(path.resolve(root, './tsconfig.json'));
};
/**
 * Is Empty object
 *
 * @param o - Any object.
 * @returns Whether it is empty object.
 */

export var isEmpty = function isEmpty(o) {
  return Object.entries(o).length === 0 && o.constructor === Object;
};
/**
 * Is SSR project
 *
 * @param config - User config.
 * @returns Whether to use server side render.
 */

export var isSSR = function isSSR(config) {
  var server = config.server;

  if (server !== null && server !== void 0 && server.ssr) {
    return true;
  }

  if (server !== null && server !== void 0 && server.ssrByEntries && !isEmpty(server.ssrByEntries)) {
    for (var _i = 0, _Object$keys = Object.keys(server.ssrByEntries); _i < _Object$keys.length; _i++) {
      var name = _Object$keys[_i];

      if (server.ssrByEntries[name]) {
        return true;
      }
    }
  }

  return false;
};
export var isUseSSRBundle = function isUseSSRBundle(config) {
  var output = config.output;

  if (output !== null && output !== void 0 && output.ssg) {
    return true;
  }

  return isSSR(config);
};
export var isFastRefresh = function isFastRefresh() {
  return isDev() && process.env.FAST_REFRESH !== 'false';
};
export * from "./node-env";
export * from "./platform";
export * from "./type";