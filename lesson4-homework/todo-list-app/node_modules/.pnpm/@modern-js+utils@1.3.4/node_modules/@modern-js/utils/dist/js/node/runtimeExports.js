"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRuntimeExportsUtils = void 0;

var _path = _interopRequireDefault(require("path"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path2 = require("./path");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const memo = fn => {
  const cache = new Map();
  return (...params) => {
    const stringifiedParams = JSON.stringify(params);
    const cachedResult = cache.get(stringifiedParams);

    if (cachedResult) {
      return cachedResult;
    }

    const res = fn(...params);
    cache.set(stringifiedParams, res);
    return res;
  };
};

const createRuntimeExportsUtils = memo((pwd = '', namespace, ts = false) => {
  const entryExportFile = _path.default.join(pwd, `.runtime-exports/${namespace ? `${namespace}.js` : 'index.js'}`);

  const entryExportTsFile = _path.default.join(pwd, `.runtime-exports/${namespace ? `${namespace}.d.ts` : 'index.d.ts'}`); // const ensure = () => {
  //   if (!fs.existsSync(entryExportFile)) {
  //     fs.outputFileSync(entryExportFile, '');
  //   }
  //   fs.ensureFileSync(entryExportFile);
  // };


  const addExport = statement => {
    // eslint-disable-next-line no-param-reassign
    statement = (0, _path2.normalizeOutputPath)(statement);

    try {
      _fsExtra.default.ensureFileSync(entryExportFile);

      _fsExtra.default.ensureFileSync(entryExportTsFile);

      if (!_fsExtra.default.readFileSync(entryExportFile, 'utf8').includes(statement)) {
        _fsExtra.default.appendFileSync(entryExportFile, `${statement}\n`);

        ts && _fsExtra.default.appendFileSync(entryExportTsFile, `${statement.replace('.js', '.d')}\n`);
      }
    } catch (_unused) {// FIXME:
    }
  };

  const getPath = () => entryExportFile;

  return {
    addExport,
    getPath
  };
});
exports.createRuntimeExportsUtils = createRuntimeExportsUtils;