import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import * as path from 'path';
import { Import } from "./import";
var chokidar = Import.lazy('chokidar', require);
export var WatchChangeType = {
  ADD: 'add',
  UNLINK: 'unlink',
  CHANGE: 'change'
};
export var watch = function watch(watchDir, runTask) {
  var ignored = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var ready = false;
  var watcher = chokidar.watch(watchDir, {
    ignored: ignored
  });
  watcher.on('ready', function () {
    return ready = true;
  });
  watcher.on('change', /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(filePath) {
      var changedFilePath;
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              changedFilePath = path.resolve(filePath);
              _context.next = 3;
              return runTask({
                changedFilePath: changedFilePath,
                changeType: WatchChangeType.CHANGE
              });

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }());
  watcher.on('add', /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(filePath) {
      var changedFilePath;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              changedFilePath = path.resolve(filePath);

              if (!ready) {
                _context2.next = 4;
                break;
              }

              _context2.next = 4;
              return runTask({
                changedFilePath: changedFilePath,
                changeType: WatchChangeType.ADD
              });

            case 4:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }());
  watcher.on('unlink', /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(filePath) {
      var changedFilePath;
      return _regeneratorRuntime.wrap(function _callee3$(_context3) {
        while (1) {
          switch (_context3.prev = _context3.next) {
            case 0:
              changedFilePath = path.resolve(filePath);
              _context3.next = 3;
              return runTask({
                changedFilePath: changedFilePath,
                changeType: WatchChangeType.UNLINK
              });

            case 3:
            case "end":
              return _context3.stop();
          }
        }
      }, _callee3);
    }));

    return function (_x3) {
      return _ref3.apply(this, arguments);
    };
  }());
  watcher.on('error', function (err) {
    throw err;
  });
  return watcher;
};