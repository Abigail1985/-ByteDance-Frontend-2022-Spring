function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import fs from 'fs';
import path from 'path';
import chalk from 'chalk';
import { readTsConfigByFile } from "./readTsConfig";
import { applyOptionsChain } from "./applyOptionsChain";
export const validAlias = (modernConfig, {
  tsconfigPath
}) => {
  const {
    source: {
      alias
    }
  } = modernConfig;

  if (!alias) {
    return null;
  }

  const isTsProject = fs.existsSync(tsconfigPath);

  if (!isTsProject) {
    return null;
  }

  const userAlias = getUserAlias(alias);

  if (Object.keys(userAlias).length > 0) {
    return chalk.red('Note: Please use `compilerOptions.paths` in "tsconfig.json" file replace `source.alias` config in "modern.config.js/ts" when project is typescript');
  }

  return null;
};
export const getAlias = (aliasOption, option) => {
  const isTsProject = fs.existsSync(option.tsconfigPath);
  let aliasConfig;

  if (!isTsProject) {
    aliasConfig = {
      absoluteBaseUrl: option.appDirectory,
      paths: applyOptionsChain({
        '@': ['./src']
      }, aliasOption),
      isTsPath: false,
      isTsProject
    };
  } else {
    var _tsconfig$compilerOpt, _tsconfig$compilerOpt2;

    const tsconfig = readTsConfigByFile(option.tsconfigPath);
    const baseUrl = tsconfig === null || tsconfig === void 0 ? void 0 : (_tsconfig$compilerOpt = tsconfig.compilerOptions) === null || _tsconfig$compilerOpt === void 0 ? void 0 : _tsconfig$compilerOpt.baseUrl;
    aliasConfig = {
      absoluteBaseUrl: baseUrl ? path.join(option.appDirectory, baseUrl) : option.appDirectory,
      paths: _objectSpread(_objectSpread({}, aliasOption || {}), tsconfig === null || tsconfig === void 0 ? void 0 : (_tsconfig$compilerOpt2 = tsconfig.compilerOptions) === null || _tsconfig$compilerOpt2 === void 0 ? void 0 : _tsconfig$compilerOpt2.paths),
      isTsPath: true,
      isTsProject
    };
  }

  return aliasConfig;
}; // filter invalid ts paths that are not array

export const getUserAlias = (alias = {}) => Object.keys(alias).reduce((o, k) => {
  if (Array.isArray(alias[k])) {
    o[k] = alias[k];
  }

  return o;
}, {});