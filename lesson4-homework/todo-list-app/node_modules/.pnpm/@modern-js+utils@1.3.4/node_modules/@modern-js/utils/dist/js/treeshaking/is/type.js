function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

export function isString(str) {
  return typeof str === 'string';
}
export function isUndefined(obj) {
  return typeof obj === 'undefined';
}
export function isArray(obj) {
  return Object.prototype.toString.call(obj) === '[object Array]';
} // eslint-disable-next-line @typescript-eslint/ban-types

export function isFunction(func) {
  return typeof func === 'function';
} // eslint-disable-next-line @typescript-eslint/ban-types

export function isObject(obj) {
  return _typeof(obj) === 'object';
}
export function isPlainObject(obj) {
  return obj && _typeof(obj) === 'object' && Object.prototype.toString.call(obj) === '[object Object]';
}
export function isPromise(obj) {
  /* eslint-disable promise/prefer-await-to-then */
  return Boolean(obj) && (_typeof(obj) === 'object' || typeof obj === 'function') && typeof obj.then === 'function';
  /* eslint-enable promise/prefer-await-to-then */
}
export function isRegExp(obj) {
  return Object.prototype.toString.call(obj) === '[object RegExp]';
}