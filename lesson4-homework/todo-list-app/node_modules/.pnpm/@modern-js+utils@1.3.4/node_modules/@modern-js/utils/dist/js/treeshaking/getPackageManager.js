import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import os from 'os';
import path from 'path';
import fs from 'fs-extra';
import { canUsePnpm, canUseYarn } from "./nodeEnv";
var MAX_TIMES = 5;
export function getPackageManager() {
  return _getPackageManager.apply(this, arguments);
}

function _getPackageManager() {
  _getPackageManager = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var cwd,
        appDirectory,
        times,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            cwd = _args.length > 0 && _args[0] !== undefined ? _args[0] : process.cwd();
            appDirectory = cwd;
            times = 0;

          case 3:
            if (!(os.homedir() !== appDirectory && times < MAX_TIMES)) {
              _context.next = 14;
              break;
            }

            times++;

            if (!fs.existsSync(path.resolve(appDirectory, 'pnpm-lock.yaml'))) {
              _context.next = 7;
              break;
            }

            return _context.abrupt("return", 'pnpm');

          case 7:
            if (!fs.existsSync(path.resolve(appDirectory, 'yarn.lock'))) {
              _context.next = 9;
              break;
            }

            return _context.abrupt("return", 'yarn');

          case 9:
            if (!fs.existsSync(path.resolve(appDirectory, 'package-lock.json'))) {
              _context.next = 11;
              break;
            }

            return _context.abrupt("return", 'npm');

          case 11:
            appDirectory = path.join(appDirectory, '..');
            _context.next = 3;
            break;

          case 14:
            _context.next = 16;
            return canUsePnpm();

          case 16:
            if (!_context.sent) {
              _context.next = 18;
              break;
            }

            return _context.abrupt("return", 'pnpm');

          case 18:
            _context.next = 20;
            return canUseYarn();

          case 20:
            if (!_context.sent) {
              _context.next = 22;
              break;
            }

            return _context.abrupt("return", 'yarn');

          case 22:
            return _context.abrupt("return", 'npm');

          case 23:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _getPackageManager.apply(this, arguments);
}