import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import net from 'net';
import { chalk } from "./chalk";
import { logger } from "./logger";
/**
 * Get available free port.
 * @param port - Current port want to use.
 * @param tryLimits - Maximum number of retries.
 * @returns Available port number.
 */

/* eslint-disable no-param-reassign, @typescript-eslint/no-loop-func */

export var getPort = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(port) {
    var tryLimits,
        original,
        found,
        attempts,
        _args = arguments;
    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            tryLimits = _args.length > 1 && _args[1] !== undefined ? _args[1] : 20;

            if (typeof port === 'string') {
              port = parseInt(port, 10);
            }

            original = port;
            found = false;
            attempts = 0;

          case 5:
            if (!(!found && attempts <= tryLimits)) {
              _context.next = 19;
              break;
            }

            _context.prev = 6;
            _context.next = 9;
            return new Promise(function (resolve, reject) {
              var server = net.createServer();
              server.unref();
              server.on('error', reject);
              server.listen({
                port: port,
                host: '0.0.0.0'
              }, function () {
                found = true;
                server.close(resolve);
              });
            });

          case 9:
            _context.next = 17;
            break;

          case 11:
            _context.prev = 11;
            _context.t0 = _context["catch"](6);

            if (!(_context.t0.code !== 'EADDRINUSE')) {
              _context.next = 15;
              break;
            }

            throw _context.t0;

          case 15:
            port++;
            attempts++;

          case 17:
            _context.next = 5;
            break;

          case 19:
            if (port !== original) {
              logger.info(chalk.red("Something is already running on port ".concat(original, ". ").concat(chalk.yellow("Use port ".concat(port, " instead.")))));
            }

            return _context.abrupt("return", port);

          case 21:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[6, 11]]);
  }));

  return function getPort(_x) {
    return _ref.apply(this, arguments);
  };
}();
/* eslint-enable no-param-reassign, @typescript-eslint/no-loop-func */