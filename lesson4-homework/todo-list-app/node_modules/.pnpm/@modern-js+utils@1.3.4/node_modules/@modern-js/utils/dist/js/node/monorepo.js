"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isYarnWorkspaces = exports.isPnpmWorkspaces = exports.isMonorepo = exports.isModernjsMonorepo = exports.isLerna = exports.getMonorepoPackages = exports.findMonorepoRoot = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _glob = _interopRequireDefault(require("glob"));

var _yaml = _interopRequireDefault(require("yaml"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const PACKAGE_MAX_DEPTH = 5;
const WOKRSPACES_FILES = {
  YARN: 'package.json',
  PNPM: 'pnpm-workspaces.yaml',
  LERNA: 'lerna.json'
};

const isLerna = root => _fs.default.existsSync(_path.default.join(root, WOKRSPACES_FILES.LERNA));

exports.isLerna = isLerna;

const isYarnWorkspaces = root => {
  var _json$workspaces;

  const pkg = _path.default.join(root, WOKRSPACES_FILES.YARN);

  if (!_fs.default.existsSync(pkg)) {
    return false;
  }

  const json = JSON.parse(_fs.default.readFileSync(pkg, 'utf8'));
  return Boolean((_json$workspaces = json.workspaces) === null || _json$workspaces === void 0 ? void 0 : _json$workspaces.packages);
};

exports.isYarnWorkspaces = isYarnWorkspaces;

const isPnpmWorkspaces = root => _fs.default.existsSync(_path.default.join(root, WOKRSPACES_FILES.PNPM));

exports.isPnpmWorkspaces = isPnpmWorkspaces;

const isMonorepo = root => isLerna(root) || isYarnWorkspaces(root) || isPnpmWorkspaces(root);

exports.isMonorepo = isMonorepo;

const isModernjsMonorepo = root => {
  const json = JSON.parse(_fs.default.readFileSync(_path.default.join(root, 'package.json'), 'utf8'));

  const deps = _objectSpread(_objectSpread({}, json.dependencies || {}), json.devDependencies || {});

  return Boolean(deps['@modern-js/monorepo-tools']);
};

exports.isModernjsMonorepo = isModernjsMonorepo;

const findMonorepoRoot = (appDirectory, maxDepth = PACKAGE_MAX_DEPTH) => {
  let inMonorepo = false;

  for (let depth = 0; depth < maxDepth; depth++) {
    if (isMonorepo(appDirectory)) {
      inMonorepo = true;
      break;
    } // eslint-disable-next-line no-param-reassign


    appDirectory = _path.default.dirname(appDirectory);
  }

  return inMonorepo ? appDirectory : undefined;
};

exports.findMonorepoRoot = findMonorepoRoot;

const getMonorepoPackages = root => {
  let packages = [];

  if (isYarnWorkspaces(root)) {
    const json = JSON.parse(_fs.default.readFileSync(_path.default.join(root, 'package.json'), 'utf8'));
    ({
      packages
    } = json.workspaces);
  } else if (isLerna(root)) {
    const json = JSON.parse(_fs.default.readFileSync(_path.default.resolve(root, 'lerna.json'), 'utf8'));
    ({
      packages
    } = json);
  } else {
    ({
      packages
    } = _yaml.default.parse(_fs.default.readFileSync(_path.default.join(root, WOKRSPACES_FILES.PNPM), 'utf8')));
  }

  if (packages) {
    return packages.map(name => // The trailing / ensures only dirs are picked up
    _glob.default.sync(_path.default.join(root, `${name}/`), {
      ignore: ['**/node_modules/**']
    })).flat().filter(filepath => _fs.default.existsSync(_path.default.resolve(filepath, 'package.json'))).map(filepath => ({
      path: filepath,
      name: JSON.parse(_fs.default.readFileSync(_path.default.resolve(filepath, 'package.json'), 'utf8')).name
    }));
  }

  return [];
};

exports.getMonorepoPackages = getMonorepoPackages;