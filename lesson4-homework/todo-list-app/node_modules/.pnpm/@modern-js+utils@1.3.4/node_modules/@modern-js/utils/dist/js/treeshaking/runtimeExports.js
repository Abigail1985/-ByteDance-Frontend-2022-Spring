import path from 'path';
import fs from 'fs-extra';
import { normalizeOutputPath } from "./path";

var memo = function memo(fn) {
  var cache = new Map();
  return function () {
    for (var _len = arguments.length, params = new Array(_len), _key = 0; _key < _len; _key++) {
      params[_key] = arguments[_key];
    }

    var stringifiedParams = JSON.stringify(params);
    var cachedResult = cache.get(stringifiedParams);

    if (cachedResult) {
      return cachedResult;
    }

    var res = fn.apply(void 0, params);
    cache.set(stringifiedParams, res);
    return res;
  };
};

export var createRuntimeExportsUtils = memo(function () {
  var pwd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var namespace = arguments.length > 1 ? arguments[1] : undefined;
  var ts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var entryExportFile = path.join(pwd, ".runtime-exports/".concat(namespace ? "".concat(namespace, ".js") : 'index.js'));
  var entryExportTsFile = path.join(pwd, ".runtime-exports/".concat(namespace ? "".concat(namespace, ".d.ts") : 'index.d.ts')); // const ensure = () => {
  //   if (!fs.existsSync(entryExportFile)) {
  //     fs.outputFileSync(entryExportFile, '');
  //   }
  //   fs.ensureFileSync(entryExportFile);
  // };

  var addExport = function addExport(statement) {
    // eslint-disable-next-line no-param-reassign
    statement = normalizeOutputPath(statement);

    try {
      fs.ensureFileSync(entryExportFile);
      fs.ensureFileSync(entryExportTsFile);

      if (!fs.readFileSync(entryExportFile, 'utf8').includes(statement)) {
        fs.appendFileSync(entryExportFile, "".concat(statement, "\n"));
        ts && fs.appendFileSync(entryExportTsFile, "".concat(statement.replace('.js', '.d'), "\n"));
      }
    } catch (_unused) {// FIXME:
    }
  };

  var getPath = function getPath() {
    return entryExportFile;
  };

  return {
    addExport: addExport,
    getPath: getPath
  };
});