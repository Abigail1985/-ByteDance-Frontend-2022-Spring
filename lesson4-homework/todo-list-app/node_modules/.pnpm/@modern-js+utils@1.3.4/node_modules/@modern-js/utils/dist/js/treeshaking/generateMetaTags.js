/**
 * Copyright JS Foundation and other contributors.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file at
 * https://github.com/jantimon/html-webpack-plugin/blob/main/LICENSE
 *
 * Modified from https://github.com/jantimon/html-webpack-plugin/blob/2f5de7ab9e8bca60e9e200f2e4b4cfab90db28d4/index.js#L800
 */
var tagObjectToString = function tagObjectToString(tagDefinition) {
  var attributes = Object.keys(tagDefinition.attributes || {}).filter(function (attributeName) {
    return tagDefinition.attributes[attributeName] !== false;
  }).map(function (attributeName) {
    if (tagDefinition.attributes[attributeName] === true) {
      return attributeName;
    }

    return "".concat(attributeName, "=\"").concat(tagDefinition.attributes[attributeName], "\"");
  });
  return "<".concat([tagDefinition.tagName].concat(attributes).join(' '), ">").concat(tagDefinition.innerHTML || '').concat(tagDefinition.voidTag ? '' : "</".concat(tagDefinition.tagName, ">"));
};

export var generateMetaTags = function generateMetaTags(metaOptions) {
  if (!metaOptions) {
    return '';
  } // Make tags self-closing in case of xhtml
  // Turn { "viewport" : "width=500, initial-scale=1" } into
  // [{ name:"viewport" content:"width=500, initial-scale=1" }]


  var metaTagAttributeObjects = Object.keys(metaOptions).map(function (metaName) {
    var metaTagContent = metaOptions[metaName];
    return typeof metaTagContent === 'string' ? {
      name: metaName,
      content: metaTagContent
    } : metaTagContent;
  }).filter(function (attribute) {
    return attribute !== false;
  }); // Turn [{ name:"viewport" content:"width=500, initial-scale=1" }] into
  // the html-webpack-plugin tag structure

  return metaTagAttributeObjects.map(function (metaTagAttributes) {
    if (metaTagAttributes === false) {
      throw new Error('Invalid meta tag');
    }

    return {
      tagName: 'meta',
      voidTag: true,
      attributes: metaTagAttributes
    };
  }).reduce(function (memo, tagObject) {
    return "".concat(memo, "\n").concat(tagObjectToString(tagObject));
  }, '');
};