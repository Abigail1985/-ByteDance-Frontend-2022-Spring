"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getPort = void 0;

var _net = _interopRequireDefault(require("net"));

var _chalk = require("./chalk");

var _logger = require("./logger");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Get available free port.
 * @param port - Current port want to use.
 * @param tryLimits - Maximum number of retries.
 * @returns Available port number.
 */

/* eslint-disable no-param-reassign, @typescript-eslint/no-loop-func */
const getPort = async (port, tryLimits = 20) => {
  if (typeof port === 'string') {
    port = parseInt(port, 10);
  }

  const original = port;
  let found = false;
  let attempts = 0;

  while (!found && attempts <= tryLimits) {
    try {
      await new Promise((resolve, reject) => {
        const server = _net.default.createServer();

        server.unref();
        server.on('error', reject);
        server.listen({
          port,
          host: '0.0.0.0'
        }, () => {
          found = true;
          server.close(resolve);
        });
      });
    } catch (e) {
      if (e.code !== 'EADDRINUSE') {
        throw e;
      }

      port++;
      attempts++;
    }
  }

  if (port !== original) {
    _logger.logger.info(_chalk.chalk.red(`Something is already running on port ${original}. ${_chalk.chalk.yellow(`Use port ${port} instead.`)}`));
  }

  return port;
};
/* eslint-enable no-param-reassign, @typescript-eslint/no-loop-func */


exports.getPort = getPort;