import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { renderToStaticMarkup } from 'react-dom/server';
import { run } from "./hook"; // todo: SSRContext

import { jsx as _jsx } from "react/jsx-runtime";

var prefetch = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(App, context) {
    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", run(context.ssrContext.request.headers, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
              var _context$store;

              var loadersData;
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      renderToStaticMarkup( /*#__PURE__*/_jsx(App, {
                        context: context
                      }));

                      if (context.loaderManager.hasPendingLoaders()) {
                        _context.next = 3;
                        break;
                      }

                      return _context.abrupt("return", {
                        i18nData: context.__i18nData__
                      });

                    case 3:
                      _context.next = 5;
                      return context.loaderManager.awaitPendingLoaders();

                    case 5:
                      loadersData = _context.sent;
                      return _context.abrupt("return", {
                        loadersData: loadersData,
                        i18nData: context.__i18nData__,
                        // todo: move to plugin state
                        storeState: context === null || context === void 0 ? void 0 : (_context$store = context.store) === null || _context$store === void 0 ? void 0 : _context$store.getState()
                      });

                    case 7:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }))));

          case 1:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function prefetch(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

export default prefetch;