import _regeneratorRuntime from "@babel/runtime/regenerator";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

import path from 'path';
import { LOADABLE_STATS_FILE } from '@modern-js/utils/constants';
import React from 'react';
import ReactDomServer from 'react-dom/server';
import serialize from 'serialize-javascript';
import ReactHelmet from 'react-helmet';
import { toFragments } from "./template";
import { RenderLevel } from "./type";
import helmetReplace from "./helmet";
import { reduce } from "./reduce";
import * as loadableRenderer from "./loadable";
import * as styledComponentRenderer from "./styledComponent";

var buildTemplateData = function buildTemplateData(context, data, renderLevel) {
  var request = context.request;
  return {
    data: data,
    context: {
      request: {
        params: request.params,
        query: request.query,
        pathname: request.pathname,
        host: request.host,
        url: request.url,
        headers: request.headers,
        cookieMap: request.cookieMap
      }
    },
    renderLevel: renderLevel
  };
};

var Entry = /*#__PURE__*/function () {
  function Entry(options) {
    _classCallCheck(this, Entry);

    this.entryName = void 0;
    this.result = void 0;
    this.App = void 0;
    this.fragments = void 0;
    this.fragments = toFragments(options.template);
    this.entryName = options.name;
    this.App = options.App;
    this.result = {
      renderLevel: RenderLevel.CLIENT_RENDER,
      html: '',
      chunksMap: {
        js: '',
        css: ''
      }
    };
  }

  _createClass(Entry, [{
    key: "renderToHtml",
    value: function () {
      var _renderToHtml = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {
        var ssrContext, prefetchData, html, templateData, SSRData, _iterator, _step, fragment, helmetData;

        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                ssrContext = context.ssrContext;

                if (!ssrContext.redirection.url) {
                  _context.next = 3;
                  break;
                }

                return _context.abrupt("return", '');

              case 3:
                _context.next = 5;
                return this.prefetch(context);

              case 5:
                prefetchData = _context.sent;

                if (!ssrContext.redirection.url) {
                  _context.next = 8;
                  break;
                }

                return _context.abrupt("return", '');

              case 8:
                if (this.result.renderLevel >= RenderLevel.SERVER_PREFETCH) {
                  this.result.html = this.renderToString(context);
                }

                if (!ssrContext.redirection.url) {
                  _context.next = 11;
                  break;
                }

                return _context.abrupt("return", '');

              case 11:
                html = '';
                templateData = buildTemplateData(ssrContext, prefetchData, this.result.renderLevel);
                SSRData = this.getSSRDataScript(templateData);
                _iterator = _createForOfIteratorHelper(this.fragments);

                try {
                  for (_iterator.s(); !(_step = _iterator.n()).done;) {
                    fragment = _step.value;

                    if (fragment.isVariable && fragment.content === 'SSRDataScript') {
                      html += fragment.getValue(SSRData);
                    } else {
                      html += fragment.getValue(this.result);
                    }
                  }
                } catch (err) {
                  _iterator.e(err);
                } finally {
                  _iterator.f();
                }

                helmetData = ReactHelmet.renderStatic();
                return _context.abrupt("return", helmetData ? helmetReplace(html, helmetData) : html);

              case 18:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function renderToHtml(_x) {
        return _renderToHtml.apply(this, arguments);
      }

      return renderToHtml;
    }()
  }, {
    key: "prefetch",
    value: function () {
      var _prefetch = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {
        var prefetch, prefetchData;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                prefetch = this.App.prefetch;
                _context2.prev = 1;

                if (!prefetch) {
                  _context2.next = 8;
                  break;
                }

                _context2.next = 5;
                return prefetch(context);

              case 5:
                _context2.t0 = _context2.sent;
                _context2.next = 9;
                break;

              case 8:
                _context2.t0 = null;

              case 9:
                prefetchData = _context2.t0;
                this.result.renderLevel = RenderLevel.SERVER_PREFETCH;
                _context2.next = 17;
                break;

              case 13:
                _context2.prev = 13;
                _context2.t1 = _context2["catch"](1);
                // Todo report if render error or fetch data error. logic from prefetch.tsx
                this.result.renderLevel = RenderLevel.CLIENT_RENDER;
                console.error('SSR Error - App Prefetch error = %s', _context2.t1);

              case 17:
                return _context2.abrupt("return", prefetchData || {});

              case 18:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[1, 13]]);
      }));

      function prefetch(_x2) {
        return _prefetch.apply(this, arguments);
      }

      return prefetch;
    }()
  }, {
    key: "renderToString",
    value: function renderToString(context) {
      var html = '';

      try {
        var App = /*#__PURE__*/React.createElement(this.App, {
          context: Object.assign(context, {
            ssr: true
          })
        }); // Todo render Hook

        var renderContext = {
          loadableManifest: path.resolve(context.ssrContext.distDir, LOADABLE_STATS_FILE),
          result: this.result,
          entryName: this.entryName
        };
        html = reduce(App, renderContext, [loadableRenderer.toHtml, styledComponentRenderer.toHtml, function (jsx) {
          return ReactDomServer.renderToString(jsx);
        }]);
        this.result.renderLevel = RenderLevel.SERVER_RENDER;
      } catch (e) {
        console.error('SSR Error - App Render To HTML error = %s', e);
      }

      return html;
    }
  }, {
    key: "getSSRDataScript",
    value: function getSSRDataScript(templateData) {
      return {
        SSRDataScript: "\n        <script>window._SSR_DATA = ".concat(serialize(templateData, {
          isJSON: true
        }), "</script>\n      ")
      };
    }
  }]);

  return Entry;
}();

export { Entry as default };