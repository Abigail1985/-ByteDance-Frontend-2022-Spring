import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { RuntimeContext } from '@modern-js/runtime-core';
import { PreRender } from "../react/prerender";
import { run } from "../hook";
import SSREntry from "./entry";
export var render = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(ctx) {
    var _,
        App,
        _ctx$ssrContext,
        entryName,
        templateHTML,
        _args2 = arguments;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _ = _args2.length > 1 && _args2[1] !== undefined ? _args2[1] : process.cwd();
            App = _args2.length > 2 ? _args2[2] : undefined;
            _ctx$ssrContext = ctx.ssrContext, entryName = _ctx$ssrContext.entryName, templateHTML = _ctx$ssrContext.template; // const templateHTML = path.join(pwd, entryPath);

            return _context2.abrupt("return", run(ctx.ssrContext.request.headers, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
              var entry, html, cacheConfig;
              return _regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      entry = new SSREntry({
                        name: entryName,
                        App: App,
                        template: templateHTML
                      });
                      _context.next = 3;
                      return entry.renderToHtml(ctx);

                    case 3:
                      html = _context.sent;
                      cacheConfig = PreRender.config();

                      if (cacheConfig) {
                        // eslint-disable-next-line require-atomic-updates
                        ctx.ssrContext.cacheConfig = cacheConfig;
                      }

                      return _context.abrupt("return", html);

                    case 7:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }))));

          case 4:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));

  return function render(_x) {
    return _ref.apply(this, arguments);
  };
}();