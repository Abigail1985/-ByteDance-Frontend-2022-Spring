function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import path from 'path';
import { ChunkExtractor } from '@loadable/server';

function getLoadableScripts(extractor) {
  var check = function check(scripts) {
    return (scripts || '').includes('__LOADABLE_REQUIRED_CHUNKS___ext');
  };

  var scripts = extractor.getScriptTags();

  if (!check(scripts)) {
    return '';
  }

  return scripts.split('</script>') // 前两个 script为 loadable 必须的 script
  .slice(0, 2).map(function (i) {
    return "".concat(i, "</script>");
  }).join('');
}

export var toHtml = function toHtml(jsx, renderer, next) {
  var loadableManifest = renderer.loadableManifest,
      chunksMap = renderer.result.chunksMap;

  if (!loadableManifest || chunksMap.js) {
    return next(jsx);
  }

  var extractor = new ChunkExtractor({
    statsFile: loadableManifest,
    entrypoints: [renderer.entryName]
  });
  var html = next(extractor.collectChunks(jsx));
  var chunks = extractor.getChunkAssets(extractor.chunks);
  chunksMap.js = (chunksMap.js || '') + getLoadableScripts(extractor);

  var _iterator = _createForOfIteratorHelper(chunks),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var v = _step.value;
      var fileType = path.extname(v.url).slice(1);

      if (fileType === 'js') {
        chunksMap[fileType] += "<script src=\"".concat(v.url, "\"></script>");
      } else if (fileType === 'css') {
        chunksMap[fileType] += "<link href=\"".concat(v.url, "\" rel=\"stylesheet\" />");
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return html;
};