import path from 'path';
import { getEntryOptions, SERVER_RENDER_FUNCTION_NAME, LOADABLE_STATS_FILE, isUseSSRBundle, createRuntimeExportsUtils, PLUGIN_SCHEMAS } from '@modern-js/utils';
import { createPlugin, useAppContext, useResolvedConfigContext } from '@modern-js/core';
import LoadableWebpackPlugin from '@loadable/webpack-plugin';
var PLUGIN_IDENTIFIER = 'ssr';
export default createPlugin(function () {
  var ssrConfigMap = new Map();
  var pluginsExportsUtils;
  var ssrModulePath = path.resolve(__dirname, '../../../../');
  return {
    config: function config() {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      var appContext = useAppContext();
      pluginsExportsUtils = createRuntimeExportsUtils(appContext.internalDirectory, 'plugins');
      return {
        source: {
          alias: {
            '@modern-js/runtime/plugins': pluginsExportsUtils.getPath()
          }
        },
        tools: {
          webpack: function webpack(config, _ref) {
            var chain = _ref.chain;
            // eslint-disable-next-line react-hooks/rules-of-hooks
            var userConfig = useResolvedConfigContext();

            if (isUseSSRBundle(userConfig) && config.name !== 'server') {
              chain.plugin('loadable').use(LoadableWebpackPlugin, [{
                filename: LOADABLE_STATS_FILE
              }]);
            }
          },
          babel: function babel(config, _ref2) {
            var chain = _ref2.chain;
            // eslint-disable-next-line react-hooks/rules-of-hooks
            var userConfig = useResolvedConfigContext();

            if (isUseSSRBundle(userConfig)) {
              chain === null || chain === void 0 ? void 0 : chain.plugin('loadable').use(require.resolve('@loadable/babel-plugin'));
            }
          }
        }
      };
    },
    validateSchema: function validateSchema() {
      return PLUGIN_SCHEMAS['@modern-js/plugin-ssr'];
    },
    modifyEntryImports: function modifyEntryImports(_ref3) {
      var entrypoint = _ref3.entrypoint,
          imports = _ref3.imports;
      var entryName = entrypoint.entryName; // eslint-disable-next-line react-hooks/rules-of-hooks

      var userConfig = useResolvedConfigContext(); // eslint-disable-next-line react-hooks/rules-of-hooks

      var _useAppContext = useAppContext(),
          packageName = _useAppContext.packageName;

      pluginsExportsUtils.addExport("export { default as ssr } from '".concat(ssrModulePath, "'")); // if use ssg then set ssr config to true

      var ssrConfig = Boolean(userConfig.output.ssg) || getEntryOptions(entryName, userConfig.server.ssr, userConfig.server.ssrByEntries, packageName);
      ssrConfigMap.set(entryName, ssrConfig);

      if (ssrConfig) {
        imports.push({
          value: '@modern-js/runtime/plugins',
          specifiers: [{
            imported: PLUGIN_IDENTIFIER
          }]
        });
      }

      return {
        entrypoint: entrypoint,
        imports: imports
      };
    },
    modifyEntryRuntimePlugins: function modifyEntryRuntimePlugins(_ref4) {
      var entrypoint = _ref4.entrypoint,
          plugins = _ref4.plugins;

      if (ssrConfigMap.get(entrypoint.entryName)) {
        plugins.push({
          name: PLUGIN_IDENTIFIER,
          options: ssrConfigMap.get(entrypoint.entryName)
        });
      }

      return {
        entrypoint: entrypoint,
        plugins: plugins
      };
    },
    modifyEntryExport: function modifyEntryExport(_ref5) {
      var entrypoint = _ref5.entrypoint,
          exportStatement = _ref5.exportStatement;

      if (ssrConfigMap.get(entrypoint.entryName)) {
        return {
          entrypoint: entrypoint,
          exportStatement: ["export function ".concat(SERVER_RENDER_FUNCTION_NAME, "(context) {\n              return bootstrap(AppWrapper, context)\n            }"), exportStatement].join('\n')
        };
      }

      return {
        entrypoint: entrypoint,
        exportStatement: exportStatement
      };
    }
  };
}, {
  name: '@modern-js/plugin-ssr',
  required: ['@modern-js/runtime']
});