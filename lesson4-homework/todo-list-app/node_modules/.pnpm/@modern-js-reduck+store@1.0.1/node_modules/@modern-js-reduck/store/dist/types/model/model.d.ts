import { Context, Model, ModelDesc, OnMountHook, ModelDescOptions } from "../types";
declare type ModelInitial<M extends Omit<ModelDesc<any>, 'name'>> = (context: Context, {
  use,
  onMount
}: {
  use: Context['apis']['useModel'];
  onMount: OnMountHook;
}) => M;
export declare const initializerSymbol: unique symbol;
declare const model: <State = void, MDO extends ModelDescOptions = any>(name: string) => {
  define: <M extends Omit<ModelDesc<State extends void ? any : State, MDO>, "name"> = Omit<ModelDesc<State extends void ? any : State, MDO>, "name">>(modelDesc: M | ModelInitial<M>) => {
    (namespace: string): any;
    _name: string;
    _: Omit<M, "state"> & {
      state: State extends void ? M["state"] : State;
    };
  };
};
export declare const getModelInitializer: (_model: Model) => any;
export declare const isModel: (_model: any) => boolean;
export default model;