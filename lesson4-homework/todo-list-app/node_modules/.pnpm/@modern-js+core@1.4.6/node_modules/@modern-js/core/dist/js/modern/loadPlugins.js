function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { isDepExists, createDebugger, compatRequire, INTERNAL_PLUGINS } from '@modern-js/utils';
const debug = createDebugger('load-plugins');

/**
 * Try to resolve plugin entry file path.
 * @param name - Plugin name.
 * @param appDirectory - Application root directory.
 * @returns Resolved file path.
 */
const tryResolve = (name, appDirectory) => {
  let filePath = '';

  try {
    filePath = require.resolve(name, {
      paths: [appDirectory]
    });
    delete require.cache[filePath];
  } catch (err) {
    if (err.code === 'MODULE_NOT_FOUND') {
      throw new Error(`Can not find plugin ${name}.`);
    }

    throw err;
  }

  return filePath;
};

export function getAppPlugins(appDirectory, pluginConfig, internalPlugins) {
  const allPlugins = internalPlugins || INTERNAL_PLUGINS;
  const appPlugins = [...Object.keys(allPlugins).filter(name => {
    const config = allPlugins[name];

    if (config.forced === true) {
      // 参考 packages/cli/core/src/cli.ts 文件
      return true;
    }

    return isDepExists(appDirectory, name);
  }).map(name => allPlugins[name]), ...pluginConfig];
  return appPlugins;
}
/**
 * Load internal plugins which in @modern-js scope and user's custom plugins.
 * @param appDirectory - Application root directory.
 * @param userConfig - Resolved user config.
 * @param options.internalPlugins - Internal plugins.
 * @param options.transformPlugin - transform plugin before using it.
 * @returns Plugin Objects has been required.
 */

export const loadPlugins = (appDirectory, userConfig, options = {}) => {
  const {
    internalPlugins,
    transformPlugin
  } = options;

  const resolvePlugin = p => {
    const pkg = typeof p === 'string' ? p : p[0];
    const path = tryResolve(pkg, appDirectory);
    let module = compatRequire(path);
    const pluginOptions = Array.isArray(p) ? p[1] : undefined;

    if (transformPlugin) {
      module = transformPlugin(module, userConfig, pluginOptions);
    } else {
      module = typeof module === 'function' ? module(pluginOptions) : module;
    }

    return {
      pkg,
      path,
      module
    };
  };

  const plugins = getAppPlugins(appDirectory, userConfig.plugins || [], internalPlugins);
  return plugins.map(plugin => {
    const _plugin = typeof plugin === 'string' || Array.isArray(plugin) ? {
      cli: plugin
    } : plugin;

    const {
      cli,
      server
    } = _plugin;
    const loadedPlugin = {};

    if (cli) {
      const {
        pkg,
        path,
        module
      } = resolvePlugin(cli);
      loadedPlugin.cli = _objectSpread(_objectSpread({}, module), {}, {
        pluginPath: path
      });
      loadedPlugin.cliPkg = pkg;
    } // server plugins don't support to accept params


    if (server && typeof server === 'string') {
      const path = tryResolve(server, appDirectory);
      loadedPlugin.server = {
        pluginPath: path
      };
      loadedPlugin.serverPkg = server;
    }

    debug(`resolve plugin %s: %s`, plugin, {
      cli: loadedPlugin.cli,
      server: loadedPlugin.server
    });
    return loadedPlugin;
  });
};