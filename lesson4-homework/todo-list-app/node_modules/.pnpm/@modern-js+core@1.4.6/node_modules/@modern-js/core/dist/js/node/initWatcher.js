"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.initWatcher = void 0;

var _crypto = _interopRequireDefault(require("crypto"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _utils = require("@modern-js/utils");

var _chokidar = _interopRequireDefault(require("chokidar"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const debug = (0, _utils.createDebugger)('watch-files');

const md5 = data => _crypto.default.createHash('md5').update(data).digest('hex');

const hashMap = new Map();

const initWatcher = async (loaded, appDirectory, configDir, hooksRunner, argv) => {
  // only add fs watcher on dev mode.
  if (((0, _utils.isDev)() || (0, _utils.isTest)()) && argv[0] === 'dev') {
    const extraFiles = await hooksRunner.watchFiles();

    const configPath = _path.default.join(appDirectory, configDir);

    const watched = [`${configPath}/html`, ...extraFiles, loaded === null || loaded === void 0 ? void 0 : loaded.filePath, ...loaded.dependencies].filter(Boolean);
    debug(`watched: %o`, watched);

    const watcher = _chokidar.default.watch(watched, {
      cwd: appDirectory,
      ignorePermissionErrors: true,
      ignored: [/node_modules/, '**/__test__/**', '**/*.test.(js|jsx|ts|tsx)', '**/*.spec.(js|jsx|ts|tsx)', '**/*.stories.(js|jsx|ts|tsx)']
    });

    watcher.on('change', changed => {
      const lastHash = hashMap.get(changed);
      const currentHash = md5(_fs.default.readFileSync(_path.default.join(appDirectory, changed), 'utf8'));

      if (currentHash !== lastHash) {
        debug(`file change: %s`, changed);
        hashMap.set(changed, currentHash);
        hooksRunner.fileChange({
          filename: changed,
          eventType: 'change'
        });
      }
    });
    watcher.on('add', name => {
      debug(`add file: %s`, name);
      const currentHash = md5(_fs.default.readFileSync(_path.default.join(appDirectory, name), 'utf8'));
      hashMap.set(name, currentHash);
      hooksRunner.fileChange({
        filename: name,
        eventType: 'add'
      });
    });
    watcher.on('unlink', name => {
      debug(`remove file: %s`, name);

      if (hashMap.has(name)) {
        hashMap.delete(name);
      }

      hooksRunner.fileChange({
        filename: name,
        eventType: 'unlink'
      });
    });
    watcher.on('error', err => {
      throw err;
    });
    return watcher;
  }
};

exports.initWatcher = initWatcher;