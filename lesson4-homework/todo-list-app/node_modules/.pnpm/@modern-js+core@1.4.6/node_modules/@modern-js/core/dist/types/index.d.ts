import { INTERNAL_PLUGINS } from '@modern-js/utils';
import { ParallelWorkflow, AsyncWorkflow, Progresses2Runners, AsyncWaterfall } from '@modern-js/plugin';
import type { Hooks } from '@modern-js/types';
import { ErrorObject } from 'ajv';
import { Command } from './utils/commander';
import { TransformPlugin } from './loadPlugins';
import { AppContext, ConfigContext, IAppContext, initAppContext, ResolvedConfigContext, useAppContext, useConfigContext, useResolvedConfigContext } from './context';
import { NormalizedConfig } from './config/mergeConfig';
export type { Hooks };
export * from './config';
export * from '@modern-js/plugin';
export * from '@modern-js/plugin/node';
export declare type HooksRunner = Progresses2Runners<{
  config: ParallelWorkflow<void>;
  resolvedConfig: AsyncWaterfall<{
    resolved: NormalizedConfig;
  }>;
  validateSchema: ParallelWorkflow<void>;
  prepare: AsyncWorkflow<void, void>;
  commands: AsyncWorkflow<{
    program: Command;
  }, void>;
  watchFiles: ParallelWorkflow<void>;
  fileChange: AsyncWorkflow<{
    filename: string;
    eventType: 'add' | 'change' | 'unlink';
  }, void>;
  beforeExit: AsyncWorkflow<void, void>;
}>;
export declare const manager: import("@modern-js/plugin").AsyncManager<Hooks, {
  config: ParallelWorkflow<void, unknown>;
  resolvedConfig: AsyncWaterfall<{
    resolved: NormalizedConfig;
  }>;
  validateSchema: ParallelWorkflow<void, unknown>;
  prepare: AsyncWorkflow<void, void>;
  commands: AsyncWorkflow<{
    program: Command;
  }, void>;
  watchFiles: ParallelWorkflow<void, unknown>;
  fileChange: AsyncWorkflow<{
    filename: string;
    eventType: 'add' | 'change' | 'unlink';
  }, void>;
  beforeExit: AsyncWorkflow<void, void>;
  beforeRestart: AsyncWorkflow<void, void>;
}>;
export declare const createPlugin: (initializer: import("@modern-js/plugin").AsyncInitializer<Partial<import("@modern-js/plugin").Progresses2Threads<{
  config: ParallelWorkflow<void, unknown>;
  resolvedConfig: AsyncWaterfall<{
    resolved: NormalizedConfig;
  }>;
  validateSchema: ParallelWorkflow<void, unknown>;
  prepare: AsyncWorkflow<void, void>;
  commands: AsyncWorkflow<{
    program: Command;
  }, void>;
  watchFiles: ParallelWorkflow<void, unknown>;
  fileChange: AsyncWorkflow<{
    filename: string;
    eventType: 'add' | 'change' | 'unlink';
  }, void>;
  beforeExit: AsyncWorkflow<void, void>;
  beforeRestart: AsyncWorkflow<void, void>;
} & import("@modern-js/plugin").ClearDraftProgress<Hooks>>>>, options?: import("@modern-js/plugin").PluginOptions | undefined) => import("@modern-js/plugin").AsyncPlugin<Partial<import("@modern-js/plugin").Progresses2Threads<{
  config: ParallelWorkflow<void, unknown>;
  resolvedConfig: AsyncWaterfall<{
    resolved: NormalizedConfig;
  }>;
  validateSchema: ParallelWorkflow<void, unknown>;
  prepare: AsyncWorkflow<void, void>;
  commands: AsyncWorkflow<{
    program: Command;
  }, void>;
  watchFiles: ParallelWorkflow<void, unknown>;
  fileChange: AsyncWorkflow<{
    filename: string;
    eventType: 'add' | 'change' | 'unlink';
  }, void>;
  beforeExit: AsyncWorkflow<void, void>;
  beforeRestart: AsyncWorkflow<void, void>;
} & import("@modern-js/plugin").ClearDraftProgress<Hooks>>>>, registerHook: (newShape: Partial<Hooks>) => void, mountHook: () => Progresses2Runners<{
  config: ParallelWorkflow<void, unknown>;
  resolvedConfig: AsyncWaterfall<{
    resolved: NormalizedConfig;
  }>;
  validateSchema: ParallelWorkflow<void, unknown>;
  prepare: AsyncWorkflow<void, void>;
  commands: AsyncWorkflow<{
    program: Command;
  }, void>;
  watchFiles: ParallelWorkflow<void, unknown>;
  fileChange: AsyncWorkflow<{
    filename: string;
    eventType: 'add' | 'change' | 'unlink';
  }, void>;
  beforeExit: AsyncWorkflow<void, void>;
  beforeRestart: AsyncWorkflow<void, void>;
} & import("@modern-js/plugin").ClearDraftProgress<Hooks>>;
export declare const usePlugins: (plugins: string[]) => void;
export { AppContext, ResolvedConfigContext, useAppContext, useConfigContext, useResolvedConfigContext, ConfigContext };
export type { NormalizedConfig, IAppContext };
declare const initAppDir: (cwd?: string | undefined) => Promise<string>;
export interface CoreOptions {
  configFile?: string;
  packageJsonConfig?: string;
  plugins?: typeof INTERNAL_PLUGINS;
  transformPlugin?: TransformPlugin;
  onSchemaError?: (error: ErrorObject) => void;
  options?: {
    metaName?: string;
    srcDir?: string;
    distDir?: string;
    sharedDir?: string;
  };
}
export declare const cli: {
  init: (argv?: string[], options?: CoreOptions | undefined) => Promise<{
    loadedConfig: import("./config").LoadedConfig;
    appContext: IAppContext;
    resolved: NormalizedConfig;
  }>;
  run: (argv: string[], options?: CoreOptions | undefined) => Promise<void>;
  restart: () => Promise<void>;
};
export { initAppDir, initAppContext };