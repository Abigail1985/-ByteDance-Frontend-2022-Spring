"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useResolvedConfigContext = exports.useConfigContext = exports.useAppContext = exports.initAppContext = exports.ResolvedConfigContext = exports.ConfigContext = exports.AppContext = void 0;

var _path = _interopRequireDefault(require("path"));

var _plugin = require("@modern-js/plugin");

var _address = _interopRequireDefault(require("address"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const AppContext = (0, _plugin.createContext)({});
exports.AppContext = AppContext;
const ConfigContext = (0, _plugin.createContext)({});
exports.ConfigContext = ConfigContext;
const ResolvedConfigContext = (0, _plugin.createContext)({});
exports.ResolvedConfigContext = ResolvedConfigContext;

const useAppContext = () => AppContext.use().value;

exports.useAppContext = useAppContext;

const useConfigContext = () => ConfigContext.use().value;

exports.useConfigContext = useConfigContext;

const useResolvedConfigContext = () => ResolvedConfigContext.use().value;

exports.useResolvedConfigContext = useResolvedConfigContext;

const initAppContext = (appDirectory, plugins, configFile, options) => {
  const {
    metaName = 'modern-js',
    srcDir = 'src',
    distDir = '',
    sharedDir = 'shared'
  } = options || {};
  return {
    metaName,
    appDirectory,
    configFile,
    ip: _address.default.ip(),
    port: 0,
    packageName: require(_path.default.resolve(appDirectory, './package.json')).name,
    srcDirectory: _path.default.resolve(appDirectory, srcDir),
    distDirectory: distDir,
    sharedDirectory: _path.default.resolve(appDirectory, sharedDir),
    nodeModulesDirectory: _path.default.resolve(appDirectory, './node_modules'),
    internalDirectory: _path.default.resolve(appDirectory, `./node_modules/.${metaName}`),
    plugins,
    htmlTemplates: {},
    serverRoutes: [],
    entrypoints: [],
    checkedEntries: [],
    existSrc: true,
    internalDirAlias: `@_${metaName.replace(/-/g, '_')}_internal`,
    internalSrcAlias: `@_${metaName.replace(/-/g, '_')}_src`
  };
};

exports.initAppContext = initAppContext;