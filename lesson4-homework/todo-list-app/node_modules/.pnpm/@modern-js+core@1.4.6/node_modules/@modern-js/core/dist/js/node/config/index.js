"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "defaultsConfig", {
  enumerable: true,
  get: function () {
    return _defaults.defaults;
  }
});
exports.loadUserConfig = exports.defineConfig = void 0;
Object.defineProperty(exports, "mergeConfig", {
  enumerable: true,
  get: function () {
    return _mergeConfig.mergeConfig;
  }
});
exports.resolveConfig = void 0;

var _loadConfig = require("@modern-js/load-config");

var _ajv = _interopRequireDefault(require("ajv"));

var _ajvKeywords = _interopRequireDefault(require("ajv-keywords"));

var _signale = _interopRequireDefault(require("signale"));

var _utils = require("@modern-js/utils");

var _lodash = _interopRequireDefault(require("lodash.mergewith"));

var _betterAjvErrors = _interopRequireDefault(require("better-ajv-errors"));

var _codeFrame = require("@babel/code-frame");

var _repeatKeyWarning = require("../utils/repeatKeyWarning");

var _defaults = require("./defaults");

var _mergeConfig = require("./mergeConfig");

var _schema = require("./schema");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const debug = (0, _utils.createDebugger)('resolve-config');

const defineConfig = config => config;

exports.defineConfig = defineConfig;

const loadUserConfig = async (appDirectory, filePath, packageJsonConfig) => {
  const loaded = await (0, _loadConfig.loadConfig)(appDirectory, filePath, packageJsonConfig);
  const config = !loaded ? {} : await (typeof loaded.config === 'function' ? loaded.config(0) : loaded.config);
  return {
    config: (0, _lodash.default)({}, config || {}, (loaded === null || loaded === void 0 ? void 0 : loaded.pkgConfig) || {}),
    jsConfig: config || {},
    pkgConfig: (loaded === null || loaded === void 0 ? void 0 : loaded.pkgConfig) || {},
    filePath: loaded === null || loaded === void 0 ? void 0 : loaded.path,
    dependencies: (loaded === null || loaded === void 0 ? void 0 : loaded.dependencies) || []
  };
};

exports.loadUserConfig = loadUserConfig;

const showAdditionalPropertiesError = error => {
  if (error.keyword === 'additionalProperties' && error.params.additionalProperty) {
    const target = [error.instancePath.slice(1), error.params.additionalProperty].filter(Boolean).join('.');
    const name = Object.keys(_utils.PLUGIN_SCHEMAS).find(key => _utils.PLUGIN_SCHEMAS[key].some(schemaItem => schemaItem.target === target));

    if (name) {
      _signale.default.warn(`The configuration of ${_utils.chalk.bold(target)} is provided by plugin ${_utils.chalk.bold(name)}. Please use ${_utils.chalk.bold('yarn new')} to enable the corresponding capability.\n`);
    }
  }
};
/* eslint-disable max-statements, max-params */


const resolveConfig = async (loaded, configs, schemas, restartWithExistingPort, argv, onSchemaError = showAdditionalPropertiesError) => {
  var _validate$errors;

  const {
    config: userConfig,
    jsConfig,
    pkgConfig
  } = loaded;
  const ajv = new _ajv.default({
    $data: true,
    strict: false
  });
  (0, _ajvKeywords.default)(ajv);
  const validateSchema = (0, _schema.patchSchema)(schemas);
  const validate = ajv.compile(validateSchema);
  (0, _repeatKeyWarning.repeatKeyWarning)(validateSchema, jsConfig, pkgConfig); // validate user config.

  const valid = validate(userConfig);

  if (!valid && (_validate$errors = validate.errors) !== null && _validate$errors !== void 0 && _validate$errors.length) {
    var _validate$errors2;

    onSchemaError(validate === null || validate === void 0 ? void 0 : validate.errors[0]);
    const errors = (0, _betterAjvErrors.default)(validateSchema, userConfig, (_validate$errors2 = validate.errors) === null || _validate$errors2 === void 0 ? void 0 : _validate$errors2.map(e => _objectSpread(_objectSpread({}, e), {}, {
      dataPath: e.instancePath
    })), {
      format: 'js',
      indent: 2
    });

    _signale.default.log((0, _codeFrame.codeFrameColumns)(JSON.stringify(userConfig, null, 2), {
      start: errors === null || errors === void 0 ? void 0 : errors[0].start,
      end: errors === null || errors === void 0 ? void 0 : errors[0].end
    }, {
      highlightCode: true,
      message: errors === null || errors === void 0 ? void 0 : errors[0].error
    }));

    throw new Error(`Validate configuration error`);
  } // validate config from plugins.


  for (const config of configs) {
    if (!validate(config)) {
      _signale.default.error(validate.errors);

      throw new Error(`Validate configuration error.`);
    }
  }

  const resolved = (0, _mergeConfig.mergeConfig)([_defaults.defaults, ...configs, userConfig]);
  resolved._raw = loaded.config;

  if ((0, _utils.isDev)() && argv[0] === 'dev') {
    if (restartWithExistingPort > 0) {
      // dev server is restarted, should use existing port number
      resolved.server.port = restartWithExistingPort;
    } else {
      // get port for new dev server
      resolved.server.port = await (0, _utils.getPort)(resolved.server.port);
    }
  }

  debug('resolved %o', resolved);
  return resolved;
};
/* eslint-enable max-statements, max-params */


exports.resolveConfig = resolveConfig;