import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import path from 'path';
import { PLUGIN_SCHEMAS, createRuntimeExportsUtils, cleanRequireCache } from '@modern-js/utils';
import { createPlugin, usePlugins, useAppContext } from '@modern-js/core';

var useInternalDirectory = function useInternalDirectory() {
  return useAppContext().internalDirectory;
}; // eslint-disable-next-line react-hooks/rules-of-hooks


usePlugins([require.resolve('@modern-js/plugin-state/cli'), require.resolve('@modern-js/plugin-router/cli'), require.resolve('@modern-js/plugin-ssr/cli')]);
export default createPlugin(function () {
  var runtimeExportsUtils = {};
  return {
    config: function config() {
      // eslint-disable-next-line react-hooks/rules-of-hooks
      var dir = useInternalDirectory();
      runtimeExportsUtils = createRuntimeExportsUtils(dir, 'index');
      return {
        runtime: {},
        runtimeByEntries: {},
        source: {
          alias: {
            '@modern-js/runtime$': runtimeExportsUtils.getPath()
          }
        }
      };
    },
    validateSchema: function validateSchema() {
      return PLUGIN_SCHEMAS['@modern-js/runtime'];
    },
    addRuntimeExports: function addRuntimeExports() {
      var runtimePackage = path.resolve(__dirname, '../../../../');
      runtimeExportsUtils.addExport("export * from '".concat(runtimePackage, "'"));
    },
    beforeRestart: function beforeRestart() {
      return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                cleanRequireCache([require.resolve('@modern-js/plugin-state/cli'), require.resolve('@modern-js/plugin-router/cli'), require.resolve('@modern-js/plugin-ssr/cli')]);

              case 1:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }))();
    }
  };
}, {
  name: '@modern-js/runtime',
  post: ['@modern-js/plugin-router', '@modern-js/plugin-ssr', '@modern-js/plugin-state', '@modern-js/plugin-design-token']
});