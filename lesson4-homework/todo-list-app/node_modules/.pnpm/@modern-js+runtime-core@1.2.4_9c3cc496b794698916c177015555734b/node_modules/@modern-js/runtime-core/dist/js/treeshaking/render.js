import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React from 'react';
import ReactDOM from 'react-dom';
import { runtime } from "./plugin";
export var initialRender = function initialRender(plugins) {
  var manager = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : runtime;
  manager.usePlugin.apply(manager, _toConsumableArray(plugins));
  return {
    clientRender: function clientRender(props, rootElement) {
      return _clientRender(props, rootElement, manager);
    },
    serverRender: function serverRender(props) {
      return _serverRender(props, manager);
    }
  };
};

var _clientRender = function _clientRender(_ref, rootElement) {
  var App = _ref.App;
  var manager = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : runtime;
  var runner = manager.init({});
  return runner.client({
    App: App,
    rootElement: rootElement
  }, {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    onLast: function () {
      var _onLast = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref2) {
        var App, rootElement;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                App = _ref2.App, rootElement = _ref2.rootElement;
                ReactDOM.render( /*#__PURE__*/React.createElement(App), rootElement);

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      function onLast(_x) {
        return _onLast.apply(this, arguments);
      }

      return onLast;
    }()
  });
};

export { _clientRender as clientRender };

var _serverRender = function _serverRender(_ref3) {
  var App = _ref3.App;
  var manager = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : runtime;
  var runner = manager.init({});
  return runner.server({
    App: App
  });
};

export { _serverRender as serverRender };