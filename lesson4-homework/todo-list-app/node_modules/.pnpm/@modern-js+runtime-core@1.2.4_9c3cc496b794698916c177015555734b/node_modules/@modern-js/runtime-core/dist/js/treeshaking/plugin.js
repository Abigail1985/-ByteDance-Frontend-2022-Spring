function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { createManager, createPipeline, createAsyncPipeline, createContext } from '@modern-js/plugin';
import { createLoaderManager } from "./loader/loaderManager";
var hoc = createPipeline(); // eslint-disable-next-line @typescript-eslint/no-empty-interface

var provide = createPipeline();
export var AppComponentContext = createContext(null);
export var useAppComponent = function useAppComponent() {
  var AppComponent = AppComponentContext.use().value;

  if (!AppComponent) {
    throw new Error("Expect React.ComponentType, accept: null");
  }

  return AppComponent;
};
export var useRootElement = function useRootElement() {
  var rootElement = AppComponentContext.use().value;

  if (!rootElement) {
    throw new Error("Expect HTMLElement, accept: null");
  }

  return rootElement;
};
var client = createAsyncPipeline();
var server = createAsyncPipeline();
var init = createAsyncPipeline();
var pickContext = createPipeline();
export var createRuntime = function createRuntime() {
  return createManager({
    hoc: hoc,
    provide: provide,
    client: client,
    server: server,
    init: init,
    pickContext: pickContext
  });
};
/**
 * register init hook. It would be revoked both ssr and csr.
 */

var registerInit = function registerInit(App, _init) {
  var originalInit = App.init;

  App.init = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(context) {
      return _regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              if (!context.loaderManager) {
                context.loaderManager = createLoaderManager({});
              }

              _context.next = 3;
              return Promise.all([originalInit === null || originalInit === void 0 ? void 0 : originalInit(context), _init === null || _init === void 0 ? void 0 : _init(context)]);

            case 3:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x) {
      return _ref.apply(this, arguments);
    };
  }();
};
/**
 * register prefetch hook. It would be revoked both ssr and csr.
 * But if ssr success, It wont exec in csr again.
 * If ssr prefetch failed, It will fallback to exec in csr.
 */


var registerPrefetch = function registerPrefetch(App, prefetch) {
  var originalPrefetch = App.prefetch;

  App.prefetch = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(context) {
      var originResult, result;
      return _regeneratorRuntime.wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return originalPrefetch === null || originalPrefetch === void 0 ? void 0 : originalPrefetch(context);

            case 2:
              originResult = _context2.sent;
              _context2.next = 5;
              return prefetch === null || prefetch === void 0 ? void 0 : prefetch(context);

            case 5:
              result = _context2.sent;
              return _context2.abrupt("return", _objectSpread(_objectSpread({}, originResult), result));

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
};

export var runtime = createRuntime();
var createPlugin = runtime.createPlugin;
export { createPlugin };
export { registerInit, registerPrefetch };