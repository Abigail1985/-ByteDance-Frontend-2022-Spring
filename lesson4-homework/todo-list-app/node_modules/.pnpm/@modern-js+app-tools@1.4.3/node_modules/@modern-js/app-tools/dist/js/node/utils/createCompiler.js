"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createCompiler = void 0;

var _webpack = _interopRequireDefault(require("webpack"));

var _core = require("@modern-js/core");

var _utils = require("@modern-js/utils");

var _printInstructions = require("./printInstructions");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const prettyTime = stats => {
  var _stats$children;

  return Math.max(...(((_stats$children = stats.children) === null || _stats$children === void 0 ? void 0 : _stats$children.map(child => child.time || 0)) || []));
};

const createCompiler = async ({
  webpackConfigs,
  // TODO: params
  userConfig,
  appContext
}) => {
  try {
    await (0, _core.mountHook)().beforeCreateCompiler({
      webpackConfigs
    });
    const compiler = (0, _webpack.default)(webpackConfigs);
    await (0, _core.mountHook)().afterCreateCompiler({
      compiler
    });
    let isFirstCompile = true;
    compiler.hooks.invalid.tap('invalid', () => {
      (0, _utils.clearConsole)();

      _utils.logger.log('Compiling...');
    });
    compiler.hooks.done.tap('done', async stats => {
      (0, _utils.clearConsole)();
      const statsData = stats.toJson({
        all: false,
        warnings: true,
        errors: true,
        timings: true
      });
      const {
        errors,
        warnings
      } = (0, _utils.formatWebpackMessages)(statsData);

      if (errors.length) {
        _utils.logger.log(_utils.chalk.red(`Failed to compile.\n`));

        _utils.logger.log(errors.join('\n\n'));

        _utils.logger.log();
      } else if (process.stdout.isTTY || isFirstCompile) {
        await (0, _core.mountHook)().afterDev();

        if (warnings.length) {
          _utils.logger.log(_utils.chalk.yellow(`Compiled with warnings.\n`));

          _utils.logger.log(warnings.join('\n\n'));

          _utils.logger.log();
        } else {
          _utils.logger.log(_utils.chalk.green(`Compiled successfully in ${prettyTime(statsData)} ms.\n`));
        }

        await (0, _printInstructions.printInstructions)(appContext, userConfig);
      } // eslint-disable-next-line require-atomic-updates


      isFirstCompile = false;
    });
    return compiler;
  } catch (err) {
    _utils.logger.log(_utils.chalk.red(`Failed to compile.`));

    _utils.logger.log();

    _utils.logger.log(err); // FIXME: 这里最好抛出异常，执行 process.exit 的地方尽可能少或者控制在几个统一的地方比较合适
    // eslint-disable-next-line no-process-exit


    process.exit(1);
  }
};

exports.createCompiler = createCompiler;