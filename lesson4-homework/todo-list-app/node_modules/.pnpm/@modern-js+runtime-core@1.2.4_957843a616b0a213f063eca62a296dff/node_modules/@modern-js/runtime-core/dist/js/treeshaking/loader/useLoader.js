function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { useContext, useRef, useMemo, useState, useCallback, useEffect } from 'react';
import invariant from 'invariant';
import { RuntimeReactContext } from "../runtime-context";
import { LoaderStatus } from "./loaderManager";

var useLoader = function useLoader(loaderFn) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    params: undefined
  };
  var context = useContext(RuntimeReactContext);
  var isSSRRender = Boolean(context.ssr);
  var loaderManager = context.loaderManager;
  var loaderRef = useRef();
  var unlistenLoaderChangeRef = useRef(null);
  var load = useCallback(function (params) {
    var _window, _window$_SSR_DATA, _window$_SSR_DATA$dat, _window$_SSR_DATA$dat2, _unlistenLoaderChange4, _loaderRef$current2;

    if (typeof params === 'undefined') {
      var _loaderRef$current;

      return (_loaderRef$current = loaderRef.current) === null || _loaderRef$current === void 0 ? void 0 : _loaderRef$current.load();
    }

    var id = loaderManager.add(function () {
      try {
        var _res = loaderFn(context, params);

        if (_res instanceof Promise) {
          return _res;
        }

        return Promise.resolve(_res);
      } catch (e) {
        return Promise.reject(e instanceof Error ? e.message : e);
      }
    }, _objectSpread(_objectSpread({}, options), {}, {
      params: params
    }));
    loaderRef.current = loaderManager.get(id);

    if (isSSRRender) {
      var _unlistenLoaderChange;

      (_unlistenLoaderChange = unlistenLoaderChangeRef.current) === null || _unlistenLoaderChange === void 0 ? void 0 : _unlistenLoaderChange.call(unlistenLoaderChangeRef);
      return undefined;
    } // skip this loader, then try to unlisten loader change


    if (options.skip) {
      var _unlistenLoaderChange2;

      (_unlistenLoaderChange2 = unlistenLoaderChangeRef.current) === null || _unlistenLoaderChange2 === void 0 ? void 0 : _unlistenLoaderChange2.call(unlistenLoaderChangeRef);
      return undefined;
    } // do not load data again in CSR hydrate stage if SSR data exists


    if (context._hydration && ((_window = window) === null || _window === void 0 ? void 0 : (_window$_SSR_DATA = _window._SSR_DATA) === null || _window$_SSR_DATA === void 0 ? void 0 : (_window$_SSR_DATA$dat = _window$_SSR_DATA.data) === null || _window$_SSR_DATA$dat === void 0 ? void 0 : (_window$_SSR_DATA$dat2 = _window$_SSR_DATA$dat.loadersData[id]) === null || _window$_SSR_DATA$dat2 === void 0 ? void 0 : _window$_SSR_DATA$dat2.error) === null) {
      var _unlistenLoaderChange3;

      (_unlistenLoaderChange3 = unlistenLoaderChangeRef.current) === null || _unlistenLoaderChange3 === void 0 ? void 0 : _unlistenLoaderChange3.call(unlistenLoaderChangeRef);
      return undefined;
    }

    var res = loaderRef.current.load(); // unlisten old loader, and subsribe to new loader

    (_unlistenLoaderChange4 = unlistenLoaderChangeRef.current) === null || _unlistenLoaderChange4 === void 0 ? void 0 : _unlistenLoaderChange4.call(unlistenLoaderChangeRef);
    unlistenLoaderChangeRef.current = (_loaderRef$current2 = loaderRef.current) === null || _loaderRef$current2 === void 0 ? void 0 : _loaderRef$current2.onChange(function (_status, _result) {
      setResult(_result);

      if (_status === LoaderStatus.fulfilled) {
        var _options$onSuccess;

        options === null || options === void 0 ? void 0 : (_options$onSuccess = options.onSuccess) === null || _options$onSuccess === void 0 ? void 0 : _options$onSuccess.call(options, _result.data);
      }

      if (_status === LoaderStatus.rejected) {
        var _options$onError;

        options === null || options === void 0 ? void 0 : (_options$onError = options.onError) === null || _options$onError === void 0 ? void 0 : _options$onError.call(options, _result.error);
      }
    });
    return res;
  }, [options.skip]);
  useEffect(function () {
    return function () {
      var _unlistenLoaderChange5;

      (_unlistenLoaderChange5 = unlistenLoaderChangeRef.current) === null || _unlistenLoaderChange5 === void 0 ? void 0 : _unlistenLoaderChange5.call(unlistenLoaderChangeRef);
    };
  }, []);
  useMemo(function () {
    var _options$params;

    var p = (_options$params = options.params) !== null && _options$params !== void 0 ? _options$params : loaderFn.id;
    invariant(typeof p !== 'undefined' && p !== null, 'Params is required in useLoader');
    load(p);
  }, [options.params]);

  var _useState = useState(loaderRef.current.result),
      _useState2 = _slicedToArray(_useState, 2),
      result = _useState2[0],
      setResult = _useState2[1];

  return _objectSpread(_objectSpread({}, result), {}, {
    reload: load
  });
};

export default useLoader;