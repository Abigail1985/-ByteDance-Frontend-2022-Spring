var _excluded = ["context"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectDestructuringEmpty(obj) { if (obj == null) throw new TypeError("Cannot destructure undefined"); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

import React from 'react';
import { createContainer } from '@modern-js/plugin';
import { runtime, AppComponentContext } from "./plugin";
import { RuntimeReactContext } from "./runtime-context"; // eslint-disable-next-line @typescript-eslint/ban-types

export var initialWrapper = function initialWrapper(plugins) {
  var manager = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : runtime;
  manager.usePlugin.apply(manager, _toConsumableArray(plugins)); // eslint-disable-next-line @typescript-eslint/ban-types

  return function (App, config) {
    return wrap(App, config, manager);
  };
}; // eslint-disable-next-line @typescript-eslint/ban-types

export var wrap = function wrap(App, _ref) {
  _objectDestructuringEmpty(_ref);

  var manager = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : runtime;
  var runner = manager.init({});
  var container = createContainer({
    App: AppComponentContext.create(App)
  });

  var WrapperComponent = function WrapperComponent(props) {
    var element = /*#__PURE__*/React.createElement(App, _objectSpread({}, props), props.children);
    return runner.provide({
      element: element,
      props: _objectSpread({}, props),
      context: {}
    }, {
      container: container,
      // eslint-disable-next-line @typescript-eslint/no-shadow
      onLast: function onLast(_ref2) {
        var element = _ref2.element;
        return element;
      }
    });
  };

  return runner.hoc({
    App: WrapperComponent
  }, {
    container: container,
    // eslint-disable-next-line @typescript-eslint/no-shadow
    onLast: function onLast(_ref3) {
      var App = _ref3.App;

      var WrapComponent = function WrapComponent(_ref4) {
        var context = _ref4.context,
            props = _objectWithoutProperties(_ref4, _excluded);

        return /*#__PURE__*/React.createElement(RuntimeReactContext.Provider, {
          value: context
        }, /*#__PURE__*/React.createElement(App, props));
      };

      return WrapComponent;
    }
  });
};