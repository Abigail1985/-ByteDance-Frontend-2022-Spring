"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getBabelOptions = void 0;

var _path = _interopRequireDefault(require("path"));

var _utils = require("@modern-js/utils");

var _readPackageJson = require("./readPackageJson");

var _constants = require("./constants");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getBabelOptions = (metaName, appDirectory, config, name, chain) => {
  var _config$tools, _config$output, _config$output2, _config$output3, _config$output4, _config$tools2;

  return {
    babelrc: false,
    configFile: false,
    cacheIdentifier: (0, _utils.getCacheIdentifier)([{
      name: 'babel-loader',
      version: (0, _readPackageJson.readPackageJson)(require.resolve('babel-loader')).version
    }, {
      name: '@modern-js/babel-preset-app',
      version: (0, _readPackageJson.readPackageJson)(require.resolve('@modern-js/babel-preset-app')).version
    }]),
    cacheDirectory: _path.default.resolve(appDirectory, _constants.CACHE_DIRECTORY, `babel/${name}`),
    cacheCompression: false,
    compact: (0, _utils.isProd)(),
    presets: [[require.resolve('@modern-js/babel-preset-app'), {
      metaName,
      appDirectory,
      target: 'client',
      lodash: (0, _utils.applyOptionsChain)({
        id: ['lodash', 'ramda']
      }, (_config$tools = config.tools) === null || _config$tools === void 0 ? void 0 : _config$tools.lodash),
      useLegacyDecorators: !((_config$output = config.output) !== null && _config$output !== void 0 && _config$output.enableLatestDecorators),
      useBuiltIns: ((_config$output2 = config.output) === null || _config$output2 === void 0 ? void 0 : _config$output2.polyfill) === 'ua' || ((_config$output3 = config.output) === null || _config$output3 === void 0 ? void 0 : _config$output3.polyfill) === 'off' ? false : (_config$output4 = config.output) === null || _config$output4 === void 0 ? void 0 : _config$output4.polyfill,
      chain,
      styledComponents: (0, _utils.applyOptionsChain)({
        pure: true,
        displayName: true,
        ssr: (0, _utils.isUseSSRBundle)(config),
        transpileTemplateLiterals: true
      }, (_config$tools2 = config.tools) === null || _config$tools2 === void 0 ? void 0 : _config$tools2.styledComponents)
    }]]
  };
};

exports.getBabelOptions = getBabelOptions;