/// <reference types="react" />
import { createStore, Store } from '@modern-js-reduck/store';
declare module '@modern-js/runtime-core' {
  interface RuntimeContext {
    store: Store;
  }
  interface TRuntimeContext {
    store: Store;
  }
  interface SSRData {
    storeState: any;
  }
}
declare type PluginProps = Parameters<typeof createStore>[0];
declare const state: (config: PluginProps) => import("@modern-js/core").Plugin<Partial<import("@modern-js/runtime-core").Progresses2Threads<{
  hoc: import("@modern-js/runtime-core").Pipeline<{
    App: import("react").ComponentType<any>;
  }, import("react").ComponentType<any>>;
  provide: import("@modern-js/runtime-core").Pipeline<{
    element: JSX.Element;
    readonly props: import("@modern-js/runtime-core/src/plugin").AppProps;
    readonly context: import("@modern-js/runtime-core").RuntimeContext;
  }, JSX.Element>;
  client: import("@modern-js/runtime-core").AsyncPipeline<{
    App: import("react").ComponentType<any>;
    readonly context?: import("@modern-js/runtime-core").RuntimeContext | undefined;
    rootElement: HTMLElement;
  }, void>;
  server: import("@modern-js/runtime-core").AsyncPipeline<{
    App: import("react").ComponentType<any>;
    readonly context?: import("@modern-js/runtime-core").RuntimeContext | undefined;
  }, string>;
  init: import("@modern-js/runtime-core").AsyncPipeline<{
    context: import("@modern-js/runtime-core").RuntimeContext;
  }, unknown>;
  pickContext: import("@modern-js/runtime-core").Pipeline<{
    context: import("@modern-js/runtime-core").RuntimeContext;
    pickedContext: import("@modern-js/runtime-core").TRuntimeContext;
  }, import("@modern-js/runtime-core").TRuntimeContext>;
} & import("@modern-js/runtime-core").ClearDraftProgress<{}>>>>;
export default state;
export * from '../plugins';