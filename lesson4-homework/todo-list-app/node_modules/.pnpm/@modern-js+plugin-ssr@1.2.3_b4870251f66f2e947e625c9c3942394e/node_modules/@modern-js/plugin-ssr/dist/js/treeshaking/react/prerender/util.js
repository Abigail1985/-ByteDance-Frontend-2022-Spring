function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var REQUEST_META = ['header', 'query'];
export var getInnermostProperty = function getInnermostProperty(propsList, propName) {
  for (var i = propsList.length - 1; i >= 0; i--) {
    var props = propsList[i];

    if (props.hasOwnProperty(propName)) {
      return props[propName];
    }
  }

  return null;
};
export var getOuttermostProperty = function getOuttermostProperty(propsList, propName) {
  var _iterator = _createForOfIteratorHelper(propsList),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var props = _step.value;

      if (props.hasOwnProperty(propName)) {
        return props[propName];
      }
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return null;
};
export var aggKeysFromPropsList = function aggKeysFromPropsList(propsList, propName) {
  var initResult = REQUEST_META.reduce(function (result, next) {
    var key = next;
    result[key] = [];
    return result;
  }, {});
  var res = propsList.filter(function (props) {
    return usefulObject(props[propName]);
  }).reduce(function (result, next) {
    REQUEST_META.forEach(function (key) {
      var prop = next[propName];

      if (prop !== null && prop !== void 0 && prop.hasOwnProperty(key) && usefulArray(prop[key])) {
        result[key] = unique(result[key].concat(prop[key]));
      }
    });
    return result;
  }, initResult);
  return REQUEST_META.reduce(function (result, next) {
    var _result$key;

    var key = next;

    if (result[key] && ((_result$key = result[key]) === null || _result$key === void 0 ? void 0 : _result$key.length) === 0) {
      delete result[key];
    }

    return result;
  }, res);
};
export var aggMatchesFromPropsList = function aggMatchesFromPropsList(propsList, propName) {
  var initResult = REQUEST_META.reduce(function (result, next) {
    var key = next;
    result[key] = {};
    return result;
  }, {});
  var res = propsList.filter(function (props) {
    return usefulObject(props[propName]);
  }).reduce(function (result, next) {
    REQUEST_META.forEach(function (key) {
      var prop = next[propName]; // 这边目前是浅拷贝，越后渲染优先级越高

      if (prop !== null && prop !== void 0 && prop.hasOwnProperty(key) && usefulObject(prop[key])) {
        result[key] = Object.assign(result[key], prop[key]);
      }
    });
    return result;
  }, initResult);
  return REQUEST_META.reduce(function (result, next) {
    var key = next;

    if (result[key] && Object.keys(result[key]).length === 0) {
      delete result[key];
    }

    return result;
  }, res);
};

function unique(arr) {
  return Array.from(new Set(arr));
}

function usefulObject(target) {
  if (!exist(target)) {
    return false;
  }

  return target.constructor === Object && Object.keys(target).length > 0;
}

function usefulArray(target) {
  if (!exist(target)) {
    return false;
  }

  return Array.isArray(target) && target.length > 0;
}

export function exist(target) {
  return target != null;
}