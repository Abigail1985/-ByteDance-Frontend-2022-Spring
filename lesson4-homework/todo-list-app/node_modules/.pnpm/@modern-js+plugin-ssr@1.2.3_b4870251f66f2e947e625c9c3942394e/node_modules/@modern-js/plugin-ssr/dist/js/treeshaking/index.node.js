function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import _regeneratorRuntime from "@babel/runtime/regenerator";

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// eslint-disable-next-line filenames/match-exported
import path from 'path';
import { createPlugin, registerPrefetch } from '@modern-js/runtime-core';
import prefetch from "./prefetch";
export { run, useHeaders } from "./hook";
var registeredApps = new WeakSet();

var plugin = function plugin() {
  return createPlugin(function () {
    return {
      server: function () {
        var _server = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_ref) {
          var App, context, html;
          return _regeneratorRuntime.wrap(function _callee$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  App = _ref.App, context = _ref.context;

                  if (!registeredApps.has(App)) {
                    registerPrefetch(App, function (_context) {
                      return prefetch(App, _context);
                    });
                    registeredApps.add(App);
                  }

                  if (!(typeof window === 'undefined')) {
                    _context2.next = 7;
                    break;
                  }

                  _context2.next = 5;
                  return require("./serverRender").render(context, (context === null || context === void 0 ? void 0 : context.ssrContext.distDir) || path.join(process.cwd(), 'dist'), App);

                case 5:
                  html = _context2.sent;
                  return _context2.abrupt("return", html);

                case 7:
                  return _context2.abrupt("return", null);

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee);
        }));

        function server(_x) {
          return _server.apply(this, arguments);
        }

        return server;
      }(),
      pickContext: function pickContext(_ref2, next) {
        var context = _ref2.context,
            pickedContext = _ref2.pickedContext;

        var _context$ssrContext = context === null || context === void 0 ? void 0 : context.ssrContext,
            request = _context$ssrContext.request;

        var _ref3 = request.headers || {},
            cookie = _ref3.cookie,
            userAgent = _ref3['user-agent'],
            referer = _ref3.referer;

        return next({
          context: context,
          pickedContext: _objectSpread(_objectSpread({}, pickedContext), {}, {
            request: _objectSpread({
              cookie: cookie,
              userAgent: userAgent,
              referer: referer
            }, request) // FIXME: error TS2322: Type '{ request: any; store: Store<any, AnyAction> & { use: UseModel; }; }' is not assignable to type 'TRuntimeContext'. Object literal may only specify known properties, and 'request' does not exist in type 'TRuntimeContext'.

          })
        });
      }
    };
  }, {
    name: '@modern-js/plugin-ssr'
  });
};

export default plugin;
export * from "./react";