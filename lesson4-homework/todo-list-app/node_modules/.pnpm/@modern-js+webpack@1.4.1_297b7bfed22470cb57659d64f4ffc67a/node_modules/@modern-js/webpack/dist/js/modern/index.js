import { useAppContext, useResolvedConfigContext } from '@modern-js/core';
import { ClientWebpackConfig, ModernWebpackConfig, NodeWebpackConfig } from "./config";
export { BaseWebpackConfig } from "./config/base";
export let WebpackConfigTarget;

(function (WebpackConfigTarget) {
  WebpackConfigTarget[WebpackConfigTarget["CLIENT"] = 0] = "CLIENT";
  WebpackConfigTarget[WebpackConfigTarget["NODE"] = 1] = "NODE";
  WebpackConfigTarget[WebpackConfigTarget["MODERN"] = 2] = "MODERN";
})(WebpackConfigTarget || (WebpackConfigTarget = {}));

export const getWebpackConfig = target => {
  let Config = null;

  switch (target) {
    case WebpackConfigTarget.CLIENT:
      Config = ClientWebpackConfig;
      break;

    case WebpackConfigTarget.MODERN:
      Config = ModernWebpackConfig;
      break;

    case WebpackConfigTarget.NODE:
      Config = NodeWebpackConfig;
      break;

    default:
      Config = null;
  }

  if (!Config) {
    return null;
  }
  /* eslint-disable react-hooks/rules-of-hooks */


  const appContext = useAppContext();
  const options = useResolvedConfigContext();
  /* eslint-enable react-hooks/rules-of-hooks */

  const config = new Config(appContext, options);
  return config.config();
};
export { ClientWebpackConfig, ModernWebpackConfig, NodeWebpackConfig } from "./config";